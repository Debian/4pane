Description: Don't package several bitmaps of unknown copyright
 The removals will happen automatically as those files are not included in the new automake-based build system.
 This patch makes substitutes for the two that were specifically used.
Author: David Hart (david@4Pane.co.uk)
diff --git a/.build/4Pane.bkl b/.build/4Pane.bkl
deleted file mode 100755
index 6c16ae0..0000000
--- a/.build/4Pane.bkl
+++ /dev/null
@@ -1,217 +0,0 @@
-<?xml version="1.0" ?>
-<!-- $Id: 4Pane.bkl,v 0.5 2007/09/08 DGH Exp $ -->
-
-
-<makefile>
-
-    <include file="presets/wx.bkl"/>
-		<!-- A tweaked version of datafiles that respects the install-docs option -->
-    <include file="./.build/mydatafiles.bkl"/>
-
-		<!-- Options to allow packagers to configure out some or all of install -->
-		<option name="install_app">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-install_app stops make install installing the app</description>
-		</option>
-
-		<option name="symlink">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-symlink stops make install creating a 4Pane to 4pane symlink</description>
-		</option>
-
-		<option name="desktop">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-desktop stops make install trying to create a 4Pane desktop shortcut</description>
-		</option>
-
-		<option name="locale">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-locale stops make install trying to install 4Pane's locale files</description>
-		</option>
-
-		<option name="install_rc">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-install_rc stops make install installing the resource files</description>
-		</option>
-
-		<option name="install_docs">
-				<values>yes,no,install_only,uninstall_only</values>
-				<default-value>yes</default-value>
-				<values-description>yes,no,install_only,uninstall_only</values-description>
-				<description>--disable-install_docs stops make install installing the manual files</description>
-		</option>
-
-		<option name="XZFLAGS"></option>
-		<option name="EXTRA_CPPFLAGS"></option>
-		<option name="EXTRA_CFLAGS"></option>
-		<option name="EXTRA_CXXFLAGS"></option>
-		<option name="EXTRA_LDFLAGS"></option>
-		<option name="BZIP2_FLAGS"></option>
-
-		<!-- Subclass 'exe' to make it possible to add extra c/cxxflags e.g. for xz and debian packaging -->
-    <define-rule name="my_exe" extends="exe">
-        <template template="__commands_templ">
-            <set var="__cflags_mv" eval="0">
-                $(__cppflags) $(__cflags) $(CPPFLAGS) $(EXTRA_CPPFLAGS) $(XZFLAGS) $(BZIP2_FLAGS) $(EXTRA_CFLAGS) $(CFLAGS)
-            </set>
-            <set var="__cflags_var">
-                $(createMakeVar(id, '__cflags_mv', 'CFLAGS'))
-            </set>
-
-            <set var="__cxxflags_mv" eval="0">
-                $(__cppflags) $(__cxxflags) $(CPPFLAGS) $(EXTRA_CPPFLAGS) $(XZFLAGS) $(BZIP2_FLAGS) $(EXTRA_CXXFLAGS) $(CXXFLAGS) 
-            </set>
-            <set var="__cxxflags_var">
-                $(createMakeVar(id, '__cxxflags_mv', 'CXXFLAGS'))
-            </set>
-        </template>
-    </define-rule>
-
-
-    <define-tag name="bzsources" rules="my_exe">
-        <set var="__objtmp">
-            $(sources2objects(value, id, OBJEXT))
-        </set>
-        <set var="__objects" append="1">$(__objtmp)</set>
-    </define-tag>
-
-
-		<!-- This is a copy of the standard "install-to", altered to make it conditional on the 'install_app' option -->
-		<define-tag name="cond-install-to" rules="exe">
-           <add-target target="install_$(id)"
-                        type="inst-action"
-               cond="target$(addPrefixIfNotEmpty(' and ',__install_if_cond))"/>
-            <add-target target="uninstall_$(id)"
-                        type="inst-action"
-               cond="target$(addPrefixIfNotEmpty(' and ',__install_if_cond))"/>
-
-            <modify-target target="install_$(id)">
-                <command>$(INSTALL_DIR) $(DESTDIR)$(nativePaths(value))</command>
-                <dependency-of>install</dependency-of>
-            </modify-target>
-            <modify-target target="uninstall_$(id)">
-                <!-- we won't uninstall the $(DESTDIR)$(value) folder that we
-                     installed in the 'install_$(id)' target since it could
-                     really be dangerous: that folder could contain also other
-                     user-installed programs (think to /usr/local/bin !) -->
-                <dependency-of>uninstall</dependency-of>
-            </modify-target>
- 
-				<modify-target target="install_$(id)">
-						<command>
-								@if test $(install_app) = yes || test $(install_app) = install_only; then \
-									$(INSTALL_PROGRAM) $(ref('__targetdir',id))$(ref('__targetname',id)) $(DESTDIR)$(nativePaths(value)) ;\
-								fi;
-						</command>
-				</modify-target>
-				<modify-target target="uninstall_$(id)">
-						<command>
-								@if test $(install_app) = yes || test $(install_app) = uninstall_only; then \
-									$(UNINSTALL_PROGRAM) $(DESTDIR)$(nativePaths(value))$(DIRSEP)$(ref('__targetname',id)) ;\
-								fi;
-						</command>
-				</modify-target>
-		</define-tag>
-
-    <my_exe id="4Pane" template="wx">
-        <app-type>gui</app-type>
-
-        <runtime-libs>dynamic</runtime-libs>
-
-		<!-- Make it possible to add extra link flags -->
-        <ldflags> $(EXTRA_LDFLAGS) </ldflags>
-
-        <sources>$(fileList(['*.cpp','sdk/fswatcher/*.cpp']))</sources>
-
-		<!-- Extra compilation targets for non-system bzip2 builds -->
-		<!-- In theory this should 'ifdef' the bz targets and object. In practice it doesn't: -->
-		<!-- the if...endif follow the targets, not surround them; and the objects aren't affected at all -->
-				<fragment format="autoconf">ifneq ($(BZIP2_FLAGS),-DUSE_SYSTEM_BZIP2)</fragment>
-				<sources>$(fileList(['sdk/bzip/*.c']))</sources>
-				<fragment format="autoconf">endif</fragment>
-
-		<!-- This is the altered "install to", that doesn't happen if the install_app option is 'no' or 'uninstall_only' -->
-        <cond-install-to>$(BINDIR)</cond-install-to>
-
-        <wx-lib>core</wx-lib>
-        <wx-lib>base</wx-lib>
-
-		<!-- Extend "install" to symlink the exe to its alternative name and create a desktop shortcut -->
-				<modify-target target="install">
-				<command> 
-							@if test $(symlink) = yes || test $(symlink) = install_only ; then \
-								ln -fs 4Pane $(DESTDIR)$(BINDIR)/4pane ;\
-							fi;
-				</command>
-		<!-- Install 4Pane.appdata.xml if the destination dir exists -->
-				<command> 
-							@if test -d $(DATADIR)/appdata/ ; then \
-								$(INSTALL_DIR) $(DESTDIR)$(DATADIR)/appdata/ ;\
-								cp 4Pane.appdata.xml $(DESTDIR)$(DATADIR)/appdata/ ;\
-							fi;
-				</command>
-    <!-- Since 2009, .desktops without exec permissions are considered insecure, so chmod it too -->
-				<command>
-							@if test $(desktop) = yes || test $(desktop) = install_only ; then \
-									if test -d ~/Desktop/ ; then \
-											cp -up rc/4Pane.desktop ~/Desktop/4Pane.desktop ;\
-											chmod 0755 ~/Desktop/4Pane.desktop ;\
-									fi ;\
-							fi;
-				</command>
-				</modify-target>
-
-		<!-- Extend "uninstall" to delete the symlink, desktop shortcut and 4Pane.appdata.xml -->
-				<modify-target target="uninstall">
-  					<command>
-										@if test $(symlink) = yes || test $(symlink) = uninstall_only; then \
-												rm -f $(DESTDIR)$(BINDIR)/4pane ;\
-										fi;
-						</command>
-						<command>
-								@rm -f $(DESTDIR)$(DATADIR)/appdata/4Pane.appdata.xml ;
-						</command>
-						<command>
-										@if test $(desktop) = yes || test $(desktop) = uninstall_only; then \
-												rm -f ~/Desktop/4Pane.desktop ;\
-										fi;				
-						</command>
-				</modify-target>
-    </my_exe>
-
-<!-- This declaration was supposed to be needed; in 0.2.8 it just produces a "can't find" error
-    <using module="mydatafiles"/> -->
-
-		<mydata-files-tree>
-			<install-to>$(DATADIR)/4Pane</install-to>
-			<files>$(fileList(['rc/dialogs.xrc','rc/moredialogs.xrc','rc/configuredialogs.xrc','rc/4Pane.desktop','bitmaps/*.png','bitmaps/*.xpm']))</files>
-		</mydata-files-tree>
-
-    <mydata-files-preserves-dir-on-uninstall>
-			<install-to>$(DATADIR)/icons/hicolor/48x48/apps</install-to>
-			<files>$(fileList(['bitmaps/4Pane.png']))</files>
-		</mydata-files-preserves-dir-on-uninstall>
-		<mydata-files-preserves-dir-on-uninstall>
-			<install-to>$(DATADIR)/icons/hicolor/scalable/apps</install-to>
-			<files>$(fileList(['bitmaps/4Pane.svg']))</files>
-		</mydata-files-preserves-dir-on-uninstall>
-
-    <mydata-files>
-      <install-to>$(DATADIR)/doc/4Pane</install-to>
-      <files>$(fileList('doc/*.*'))</files>
-    </mydata-files>
-
-		<mylocale-files-tree>	</mylocale-files-tree>
-		
-</makefile>
-
diff --git a/.build/4Pane.m4 b/.build/4Pane.m4
index e809712..6e67d8e 100644
--- a/.build/4Pane.m4
+++ b/.build/4Pane.m4
@@ -14,21 +14,29 @@ AC_DEFUN([FP_GETARG_ENABLE],
             [], [enableval="$4"])
 
             if test "$enableval" = "no" || test "$enableval" = "disable" ; then
-        	    dnl Show a message to the user about this option
+              dnl Show a message to the user about this option
                 AC_MSG_CHECKING([for the --enable-$1 option])
                 AC_MSG_RESULT([disable both install and uninstall])
                 $2=no
+                 AM_CONDITIONAL([AMINSTALL_$1], [false])
+                 AM_CONDITIONAL([AMUNINSTALL_$1], [false])
             elif test "$enableval" = "install_only" ; then
                 AC_MSG_CHECKING([for the --enable-$1 option])
                 AC_MSG_RESULT([disable uninstall only])
                 $2=install_only
+                 AM_CONDITIONAL([AMINSTALL_$1], [true])
+                 AM_CONDITIONAL([AMUNINSTALL_$1], [false])
             elif test "$enableval" = "uninstall_only" ; then
                 AC_MSG_CHECKING([for the --enable-$1 option])
                 AC_MSG_RESULT([disable install only])
                 $2=uninstall_only
+                 AM_CONDITIONAL([AMINSTALL_$1], [false])
+                 AM_CONDITIONAL([AMUNINSTALL_$1], [true])
             else
-        	    dnl Anything else is install both. No need to burble about it
+              dnl Anything else is install both. No need to burble about it
                 $2=yes
+                 AM_CONDITIONAL([AMINSTALL_$1], [true])
+                 AM_CONDITIONAL([AMUNINSTALL_$1], [true])
                 $5
             fi
          ])
@@ -40,22 +48,24 @@ dnl The default is built-in but, e.g. for packaging, allow to use system ones
 dnl ---------------------------------------------------------------------------
 AC_DEFUN([FP_BZIP2_CHECK],
     [AC_ARG_WITH([builtin_bzip2],
-   	                 AC_HELP_STRING([--with-builtin_bzip2, whether to use built-in support for bzip2 archive peeking (if no, requires the bzip2 headers to be installed)]),
-   									 [], [withval=yes]
-									)
+                      AC_HELP_STRING([--with-builtin_bzip2, whether to use built-in support for bzip2 archive peeking (if no, requires the bzip2 headers to be installed)]),
+                      [], [withval=yes]
+                )
 
-   	 AS_IF( [test "x$withval" = "xno"],
-                 [	dnl We don't want tar.bz2 streaming to use our built-in bzip. Check that the system headers are available
-	                 	AC_CHECK_HEADER([bzlib.h], [$1="-lbz2"],
-																		[AC_MSG_ERROR([the bzip2 headers are missing. You need to install them, or else configure --with-builtin_bzip2=yes])]
-			 														)
+      AS_IF( [test "x$withval" = "xno"],
+                 [  dnl We don't want tar.bz2 streaming to use our built-in bzip. Check that the system headers are available
+                     AC_CHECK_HEADER([bzlib.h], [$1="-lbz2"],
+                                    [AC_MSG_ERROR([the bzip2 headers are missing. You need to install them, or else configure --with-builtin_bzip2=yes])]
+                                    )
 
                     AC_MSG_CHECKING([for --with-builtin_bzip2])
                     AC_MSG_RESULT([no])
                     AC_SUBST([BZIP2_FLAGS],[-DUSE_SYSTEM_BZIP2])
+                    AM_CONDITIONAL([AMBUILTIN_BZIP], [false])
                  ],
                  [  AC_MSG_CHECKING([for --with-builtin_bzip2])
                     AC_MSG_RESULT([yes])
+                    AM_CONDITIONAL([AMBUILTIN_BZIP], [true])
                     $1=""
                  ]
 
@@ -69,22 +79,21 @@ dnl either pass -DNO_LZMA_ARCHIVE_STREAMS to 'make', or disable with this macro
 dnl ---------------------------------------------------------------------------
 AC_DEFUN([FP_LZMA_ARCHIVE_STREAMS],
     [AC_ARG_ENABLE([lzma_streams],
-   	                 AC_HELP_STRING([--enable-lzma_streams, whether to build with support for xz archive peeking (if yes, requires the xz/lzma headers to be installed)]),
-   									 [], [enableval=yes]
-									)
+                      AC_HELP_STRING([--enable-lzma_streams, whether to build with support for xz archive peeking (if yes, requires the xz/lzma headers to be installed)]),
+                      [], [enableval=yes]
+                  )
 
-   	 AS_IF( [test "x$enableval" != "xno" && test "x$enableval" != "xdisable"],
-                 [	dnl We want xz archive streaming support. Check that it's available
-	                 	AC_CHECK_HEADER([lzma.h], [$1="-llzma"],
-																		[AC_MSG_ERROR([the lzma headers are missing. You need to install them, or else configure --disable-lzma_streams])]
-			 														)
+      AS_IF( [test "x$enableval" != "xno" && test "x$enableval" != "xdisable"],
+                 [  dnl We want xz archive streaming support. Check that it's available
+                     AC_CHECK_HEADER([lzma.h], [$1="-llzma"],
+                                    [AC_MSG_ERROR([the lzma headers are missing. You need to install them, or else configure --disable-lzma_streams])]
+                                   )
                  ],
                  [  AC_MSG_CHECKING([for the --enable-lzma_streams option])
                     AC_MSG_RESULT([disable])
                     AC_SUBST([XZFLAGS],[-DNO_LZMA_ARCHIVE_STREAMS])
                     $1=""
                  ]
-
           )
     ])
 
@@ -92,9 +101,7 @@ AC_DEFUN([FP_LZMA_ARCHIVE_STREAMS],
 dnl ---------------------------------------------------------------------------
 dnl FP_CHECK_GTK_HEADERS
 dnl Check that the gtk2 or 3 headers exist
-dnl FP_CHECK_GTK_HEADERS()
 dnl ---------------------------------------------------------------------------
-
 AC_DEFUN([FP_CHECK_GTK_HEADERS],
   [
   dnl Try pkgconfig first
@@ -103,10 +110,14 @@ AC_DEFUN([FP_CHECK_GTK_HEADERS],
   if test x$PKG_CONFIG != xno ; then
     if pkg-config --atleast-pkgconfig-version 0.7 ; then
       AS_IF([$PKG_CONFIG --exists gtk+-$1.0], [AC_MSG_CHECKING([for gtk$1 headers])
-                                              AC_MSG_RESULT([yes])
-                                              found="yes"
-                                             ],
-            [AC_MSG_ERROR([gtk headers not found. You probably need to install the devel package e.g. libgtk2.0-dev])]
+                                               AC_MSG_RESULT([yes])
+                                               found="yes"
+                                               GTKPKG_CFLAGS=`$PKG_CONFIG --cflags gtk+-$1.0`
+                                               AC_SUBST([GTKPKG_CFLAGS])
+                                               GTKPKG_LDFLAGS=`$PKG_CONFIG --libs gtk+-$1.0`
+                                               AC_SUBST([GTKPKG_LDFLAGS])
+                                              ],
+            [AC_MSG_ERROR([gtk headers not found. You probably need to install the devel package e.g. libgtk$1.0-dev])]
           )
     fi
   fi
@@ -114,7 +125,29 @@ AC_DEFUN([FP_CHECK_GTK_HEADERS],
   if test x"$found" = x ; then
     dnl pkgconfig either isn't installed, or failed to find the headers
     dnl Try again the autotools way NB. Does this cope with gtk2 v. gtk3 ?
-    AC_CHECK_HEADER([gtk/gtk.h], [], [ , [AC_INCLUDES_DEFAULT] ])
+    AC_CHECK_HEADER([gtk/gtk.h],
+                    [AC_MSG_CHECKING([for gtk$1 headers])
+                     AC_MSG_RESULT([yes])
+                    ],
+                    [AC_MSG_ERROR([gtk headers not found. You probably need to install the devel package e.g. libgtk$1.0-dev])]
+                   )
   fi
-])
+  ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl FP_CONTROL_ASSERTS
+dnl Since wx3 wxAsserts are turned on by default even in release builds
+dnl so turn them off here. NB must be _after_ the WX_STANDARD_OPTIONS call
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([FP_CONTROL_ASSERTS],
+  AS_IF( [echo "$CXXFLAGS" | grep -q "O0"],
+            [ : ],
+            [
+              CFLAGS="$CFLAGS -DNDEBUG"
+              CXXFLAGS="$CXXFLAGS -DNDEBUG"
+            ]
+      )
+  )
 
+    
\ No newline at end of file
diff --git a/.build/DONT_README b/.build/DONT_README
index ac2d9a3..87e6014 100644
--- a/.build/DONT_README
+++ b/.build/DONT_README
@@ -1,14 +1,5 @@
 This is how to regenerate the 4Pane build setup. It's highly unlikely that you'll need to do so (thus the name of this file, which you ignored).
 
-But if that unlikelihood occurs, the first thing to do is to transfer all this dir's files, except mydatafiles.bkl, into the main 4Pane directory i.e. ../.
+But if that unlikelihood occurs, the easy way is to run the autogen.sh script which is in this dir. You'll need to have automake installed.
 
-Next, look in the wxWidgets source code for the build/bakefiles/wxpresets dir, and note its full path: you'll need it below. While you're there, copy wxwin.m4 (in the wxWidgets main dir) to the 4Pane dir.
-
-Then you need to download and install bakefile (http://www.bakefile.org/). If you don't configure with --prefix=/usr, you'll probably need to symlink the two bakefile* files that get installed into /usr/local/share/aclocal, to /usr/share/aclocal.
-
-Now in a terminal open to the 4Pane dir, you can do the following:
-  bakefile -f autoconf -I /path/to/wxWidgets/build/bakefiles/wxpresets 4Pane.bkl
-  aclocal  -I .
-  autoconf
-
-You should then be able to proceed as normal with ./configure
\ No newline at end of file
+Then proceed as normal with ./configure and make
\ No newline at end of file
diff --git a/.build/configure.ac b/.build/configure.ac
new file mode 100644
index 0000000..049f10c
--- /dev/null
+++ b/.build/configure.ac
@@ -0,0 +1,85 @@
+dnl Process this file with autoconf to produce a configure script.
+
+AC_INIT([4Pane],[4.0])
+
+AC_PREREQ(2.59)
+
+AC_CONFIG_MACRO_DIRS([.build])
+AC_CONFIG_SRCDIR([MyDirs.cpp])
+
+
+AC_CONFIG_FILES([Makefile])
+
+AC_PROG_INSTALL
+AC_PROG_LN_S
+
+dnl For some reason, if AC_PROG_CC/CXX find C(XX)FLAGS empty they maliciously fill both with "-g -02"
+dnl We append to them in WX_STANDARD_OPTIONS later, causing a confusing duplication or inconsistency in the build output
+dnl So cache any user-supplied value and reapply it (or "") after these calls
+_CFLAGS=$CFLAGS
+_CXXFLAGS=$CXXFLAGS
+AC_PROG_CC
+AC_PROG_CXX
+CFLAGS=$_CFLAGS
+CXXFLAGS=$_CXXFLAGS
+
+AC_PROG_CXXCPP
+
+dnl These macros from wxwin.m4 check for a suitable wxWidgets build 
+WX_CONFIG_OPTIONS     dnl Supports  --wx-prefix, --wx-exec-prefix, --with-wxdir and --wx-config command line options
+WX_CONFIG_CHECK([2.8.0],[wxWin=1],[wxWin=0],[core,xrc,xml,adv,html])
+AS_IF(  [test "$wxWin" = 1],
+        [], [AC_MSG_ERROR([
+                   wxWidgets must be installed on your system
+                   but wx-config script couldn't be found.
+                   Please check that wx-config is in your \$PATH
+                   and the wxWidgets version is 2.8.0 or above.
+                   ])
+            ]
+     )
+WX_STANDARD_OPTIONS([debug,unicode,wxshared,toolkit])     dnl Handles e.g. --enable-debug --with-gtk
+WX_DETECT_STANDARD_OPTION_VALUES                          dnl Handles option values e.g. --with-gtk3  Requires a wxwin.m4 >=wx3.1
+
+AM_INIT_AUTOMAKE([subdir-objects foreign -Wall -Werror])
+
+dnl If building against gtk2 or 3, check the headers are installed
+AS_IF(  [test "x$WX_PORT" = xgtk3], [FP_CHECK_GTK_HEADERS(3)],
+        [test "x$WX_PORT" = xgtk2], [FP_CHECK_GTK_HEADERS(2)],
+        [AC_MSG_ERROR([
+            No gtk2 or gtk3 wxWidgets build found in your \$PATH.
+            Please install one and try again.
+                      ])
+        ]
+     )
+
+dnl See if we use the system bzip2 headers/lib instead of our built-in versions (the default)
+dnl LIBBZ2 gets filled with -lbz2, or nothing if we're using the built-in
+FP_BZIP2_CHECK(LIBBZ2)
+
+dnl Check for the xz/lzma headers, without which we can't build the code for xz archive streams
+dnl LIBLZMA gets filled with -llzma, or nothing if we're not using xz/lzma
+FP_LZMA_ARCHIVE_STREAMS(LIBLZMA)
+
+dnl link explicitly to required non-wx libs, as needed for non-DT_NEEDED distros
+AS_IF(  [test "x$WX_PORT" = x2], [AC_SUBST([XTRLIBS], ["-lgtk-x11-2.0 -lgobject-2.0 -lglib-2.0 -lgio-2.0 -lutil $LIBBZ2 $LIBLZMA"])],
+        [test "x$WX_PORT" = x3], [AC_SUBST([XTRLIBS], ["-lgtk-3 -lgobject-2.0 -lgio-2.0 -lutil $LIBBZ2 $LIBLZMA"])],
+        [AC_SUBST([XTRLIBS], ["-lutil $LIBBZ2 $LIBLZMA"])]
+     )
+
+FP_CONTROL_ASSERTS
+
+FP_GETARG_ENABLE([install_app], [install_app], [--disable-install_app stops make install installing the app], [enable])
+FP_GETARG_ENABLE([symlink], [symlink], [--disable-symlink stops make install creating a 4Pane to 4pane symlink], [enable])
+FP_GETARG_ENABLE([desktop], [desktop], [--disable-desktop stops make install trying to create a 4Pane desktop shortcut], [enable])
+FP_GETARG_ENABLE([locale], [locale], [--disable-locale stops make install trying to install 4Pane's locale files], [enable])
+FP_GETARG_ENABLE([install_rc], [install_rc], [--disable-install_rc stops make install installing the resource files], [enable])
+FP_GETARG_ENABLE([install_docs], [install_docs], [--disable-install_docs stops make install installing the manual files], [enable])
+
+dnl Provide an easy way of appending to CXXFLAGS etc, as this is currently hard
+dnl It can be used e.g. for the 'hardening' flags when building packages
+AC_SUBST([EXTRA_CPPFLAGS])
+AC_SUBST([EXTRA_CFLAGS])
+AC_SUBST([EXTRA_CXXFLAGS])
+AC_SUBST([EXTRA_LDFLAGS])
+
+AC_OUTPUT
diff --git a/.build/configure.in b/.build/configure.in
deleted file mode 100755
index c237b92..0000000
--- a/.build/configure.in
+++ /dev/null
@@ -1,63 +0,0 @@
-dnl Process this file with autoconf to produce a configure script.
-
-AC_INIT([4Pane],[4.0])
-
-AC_PREREQ(2.59)
-
-AC_CONFIG_SRCDIR([MyDirs.cpp])
-
-dnl These macros do the work.  Taken (& slightly amended) from wxCode's ones by Francesco Montorsi 
-AM_OPTIONS_WXCONFIG
-AM_OPTIONS_WXPRESETS
-AM_WXPRESETS_FULL([2.8.0],[xrc,xml,adv,html],[1])
-
-dnl If building against gtk2 or 3, check the headers are installed
-AS_IF(  [test "x$WX_GTKPORT_VERSION" = x3], [FP_CHECK_GTK_HEADERS(3)],
-        [test "x$WX_GTKPORT_VERSION" = x2], [FP_CHECK_GTK_HEADERS(2)],
-        []
-     )
-
-dnl See if we use the system bzip2 headers/lib instead of our built-in versions (the default)
-AC_SUBST([BZIP2_FLAGS])
-dnl LIBBZ2 gets filled with -lbz2, or nothing if we're using the built-in
-FP_BZIP2_CHECK(LIBBZ2)
-
-dnl Check for the xz/lzma headers, without which we can't build the code for xz archive streams
-AC_SUBST([XZ_FLAGS])
-dnl LIBLZMA gets filled with -llzma, or nothing if we're not using xz/lzma
-FP_LZMA_ARCHIVE_STREAMS(LIBLZMA)
-
-dnl link explicitly to required non-wx libs, as needed for non-DT_NEEDED distros
-AS_IF(  [test "x$WX_GTKPORT_VERSION" = x2], [AC_SUBST([LIBS], ["-lgtk-x11-2.0 -lgobject-2.0 -lglib-2.0 -lgio-2.0 -lutil $LIBBZ2 $LIBLZMA"])],
-        [test "x$WX_GTKPORT_VERSION" = x3], [AC_SUBST([LIBS], ["-lgtk-3 -lgobject-2.0 -lgio-2.0 -lutil $LIBBZ2 $LIBLZMA"])],
-        [AC_SUBST([LIBS], ["-lutil $LIBBZ2 $LIBLZMA"])]
-     )
-
-FP_GETARG_ENABLE([install_app], [install_app], [--disable-install_app stops make install installing the app], [enable])
-FP_GETARG_ENABLE([symlink], [symlink], [--disable-symlink stops make install creating a 4Pane to 4pane symlink], [enable])
-FP_GETARG_ENABLE([desktop], [desktop], [--disable-desktop stops make install trying to create a 4Pane desktop shortcut], [enable])
-FP_GETARG_ENABLE([locale], [locale], [--disable-locale stops make install trying to install 4Pane's locale files], [enable])
-FP_GETARG_ENABLE([install_rc], [install_rc], [--disable-install_rc stops make install installing the resource files], [enable])
-FP_GETARG_ENABLE([install_docs], [install_docs], [--disable-install_docs stops make install installing the manual files], [enable])
-
-AC_SUBST(install_app)
-AC_SUBST(symlink)
-AC_SUBST(desktop)
-AC_SUBST(locale)
-AC_SUBST(install_rc)
-AC_SUBST(install_docs)
-
-dnl Provide an easy way of appending to CXXFLAGS etc, as this is currently hard
-dnl It can be used e.g. for the 'hardening' flags when building packages
-AC_SUBST([EXTRA_CPPFLAGS])
-AC_SUBST([EXTRA_CFLAGS])
-AC_SUBST([EXTRA_CXXFLAGS])
-AC_SUBST([EXTRA_LDFLAGS])
-
-AC_BAKEFILE([m4_include(autoconf_inc.m4)])
-
-
-
-AC_CONFIG_FILES([Makefile])
-
-AC_OUTPUT
diff --git a/.build/mydatafiles.bkl b/.build/mydatafiles.bkl
deleted file mode 100644
index bac45b5..0000000
--- a/.build/mydatafiles.bkl
+++ /dev/null
@@ -1,371 +0,0 @@
-<?xml version="1.0" ?>
-<!--
-
-  This file is part of Bakefile (http://www.bakefile.org)
-
-  Copyright (C) 2003-2007 Vaclav Slavik
-
-  Permission is hereby granted, free of charge, to any person obtaining a copy
-  of this software and associated documentation files (the "Software"), to
-  deal in the Software without restriction, including without limitation the
-  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
-  sell copies of the Software, and to permit persons to whom the Software is
-  furnished to do so, subject to the following conditions:
-
-  The above copyright notice and this permission notice shall be included in
-  all copies or substantial portions of the Software.
-
-  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-  IN THE SOFTWARE.
-
-  $Id: datafiles.bkl 1151 2008-01-06 10:41:27Z vaclavslavik $
-
-  1) Declaration of data files for the purpose of installing them with
-     "make install".
-
-  2) Copies file(s) specified with <src> tag to either file specified with
-     <destfile> or to directory set with <destdir> (will be created if
-     it doesn't exist).
-
--->
-<makefile>
-
-    <!-- Copy files to flat destination directory, i.e. do *not* preserve
-         directory tree: -->
-
-    <define-rule name="__mydata-files-base">
-        <template template="_installcmd">
-            <set var="__iprg">$(INSTALL_DATA)</set>
-            <set var="__uprg">$(UNINSTALL_DATA)</set>
-            <set var="__files"/>
-            <set var="__copy_cmd" eval="0">
-                $(INSTALL_DIR) $(__dstdir) ;\
-                (cd $(__srcdir) ; $(__iprg) $(__files) $(__dstdir))
-            </set>
-            <set var="__remove_cmd" eval="0">
-																				$(__uninstall_cmd) ;\
-																				rm -rf $(__dstdir) 
-												</set>
-        </template>
-        <define-tag name="install-to">
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <set var="__dstdir">$(DESTDIR)$(nativePaths(value))</set>
-            </if>
-        </define-tag>
-        <define-tag name="srcdir">
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <set var="__srcdir">$(nativePaths(value))</set>
-            </if>
-        </define-tag>
-        <define-tag name="files">
-            <set var="__files" append="1">$(' '.join(nativePaths(value).split()))</set>
-        </define-tag>
-    </define-rule>
-
-    <define-rule name="mydata-files" pseudo="1" extends="__mydata-files-base">
-        <template>
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <modify-target target="install">
-                    <command>
-						@if test $(install_docs) = yes || test $(install_docs) = install_only; then \
-								$(ref('__copy_cmd',id)) ;\
-						fi;
-					</command>
-                </modify-target>
-                <modify-target target="uninstall">
-					 <command>
-							@if test $(install_docs) = yes || test $(install_docs) = uninstall_only; then \
-									$(ref('__remove_cmd',id)) ;\
-							fi;
-					</command>
-                </modify-target>
-            </if>
-        </template>
-    </define-rule>
-
-	<!-- This is currently used only for installing the icon and svg -->
-	<define-rule name="mydata-files-preserves-dir-on-uninstall" pseudo="1" extends="__mydata-files-base">
-        <template>
-			<set var="__remove_cmd" eval="0">
-					<!-- We want to remove just the filename of each f in __files -->
-					<!-- i.e. for bitmaps/4Pane.png just the 4Pane.png bit-->
-					<!-- This prevents uninstall removing the containing dir, which will also contain lots of other innocent icons -->
-					 for f in $(__files); do \
-                        rm -f $(__dstdir)/`basename $(DOLLAR)$(DOLLAR)f`; \
-					done
-			</set>
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <modify-target target="install">
-                    <command>
-                      @$(ref('__copy_cmd',id)) 
-                    </command>
-                </modify-target>
-                <modify-target target="uninstall">
-					 <command>
-							@$(ref('__remove_cmd',id)) 
-					</command>
-                </modify-target>
-            </if>
-        </template>
-    </define-rule>
-
-    <define-rule name="mydata-files-tg" extends="action,__mydata-files-base">
-        <template>
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <dependency-of>install</dependency-of>
-                <command>$(__copy_cmd)</command>
-            </if>
-        </template>
-    </define-rule>
-
-    <define-rule name="script-files" extends="mydata-files" pseudo="1">
-        <template>
-            <set var="__iprg">$(INSTALL_PROGRAM)</set>
-        </template>
-    </define-rule>
-
-    <define-rule name="script-files-tg" extends="mydata-files-tg">
-        <template>
-            <set var="__iprg">$(INSTALL_PROGRAM)</set>
-        </template>
-    </define-rule>
-
-    <!-- Copy files while preserving their directory structure: -->
-
-    <define-rule name="mydata-files-tree" pseudo="1">
-        <template template="_installcmd">
-            <set var="__iprg">$(INSTALL_DATA)</set>
-            <set var="__uprg">$(UNINSTALL_DATA)</set>
-            <set var="__copy_cmd" eval="0">
-                $(INSTALL_DIR) $(__dstdir) ;\
-                for f in $(__files); do \
-                    if test ! -d $(__dstdir)/`dirname $(DOLLAR)$(DOLLAR)f` ; then \
-                        $(INSTALL_DIR) $(__dstdir)/`dirname $(DOLLAR)$(DOLLAR)f`; \
-                    fi; \
-                    $(__iprg) $(__srcdir)/$(DOLLAR)$(DOLLAR)f $(__dstdir)/$(DOLLAR)$(DOLLAR)f; \
-                done
-					      	</set>
-            <set var="__remove_cmd" eval="0">
-						$(__uninstall_cmd_preservetree) ;\
-						rm -rf $(__dstdir) 
-			</set>
-
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <modify-target target="install">
-                    <command>
-						@if test $(install_rc) = yes || test $(install_rc) = install_only; then \
-								$(ref('__copy_cmd',id)) ;\
-						fi;
-					</command>
-                </modify-target>
-                <modify-target target="uninstall">
-					  <command>
-							@if test $(install_rc) = yes || test $(install_rc) = uninstall_only; then \
-									$(ref('__remove_cmd',id)) ;\
-							fi;
-					</command>
-                </modify-target>
-            </if>
-        </template>
-        <define-tag name="install-to">
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <set var="__dstdir">$(DESTDIR)$(nativePaths(value))</set>
-            </if>
-        </define-tag>
-        <define-tag name="srcdir">
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <set var="__srcdir">$(nativePaths(value)) ;\ </set>
-            </if>
-        </define-tag>
-        <define-tag name="files">
-            <set var="__files">$(' '.join(nativePaths(value).split()))</set>
-        </define-tag>
-    </define-rule>
-
-
-    <!-- Copy files while preserving their directory structure, the files being detected during configure, not bake: -->
-				<!-- This is hard-wired for locale files,  but could be generalised  : -->
-    <define-rule name="mylocale-files-tree" pseudo="1">
-        <template template="_installcmd">
-            <if cond="FORMAT_HAS_MAKE_INSTALL=='1'">
-                <modify-target target="install">
-					<command>@if test $(locale) = yes || test $(locale) = install_only ; then \
-								for l in ./locale/* ;\	<!-- for every language dir  : -->
-									do \
-										for f in $$l/LC_MESSAGES/*.mo ;\	<!-- get all the .mo files in {language}/LC_MESSAGES : -->
-											do \
-												if test -f $$f ; then \ <!-- If it's a file, make any necessary dirs in the destination, then copy : -->
-													mkdir -p $(DESTDIR)$(datadir)/$$l/LC_MESSAGES ;\
-													cp  $$f $(DESTDIR)$(datadir)/$$l/LC_MESSAGES/ ;\
-												fi ;\
-											done ;\
-									done ;\
-						fi
-					</command>
-                </modify-target>
-                <modify-target target="uninstall">
-					  <command>
-							@if test $(locale) = yes || test $(locale) = uninstall_only ; then \
-									for l in ./locale/* ;\	<!-- for every language dir  : -->
-										do \
-											for f in $$l/LC_MESSAGES/4pane.mo $$l/LC_MESSAGES/4Pane.mo;\	
-												do \
-													if test -f $$f ; then \	<!-- If it was in the 4Pane source dir, it must have been installed, so uninstall it  : -->
-														rm -f $(DESTDIR)$(datadir)/$$f ; fi ;\
-												done ;\
-										done ;\
-							fi
-					</command>
-                </modify-target>
-            </if>
-        </template>
-    </define-rule>
-
-
-
-
-
-    <!-- Copying files around as part of the build process:
-         NOTE: these rules do not modify 'install' or 'uninstall' targets -->
-
-    <define-rule name="copy-files" extends="action">
-        <template>
-            <is-phony/>
-            <set var="__srcdir">$(nativePaths(SRCDIR))</set>
-
-            <!--
-              DigitalMars' smake has problems with long command lines, so we
-              have to work around it. More details here:
-              http://sourceforge.net/mailarchive/message.php?msg_id=9595825
-              -->
-            <if cond="TOOLSET=='win32' and FORMAT=='dmars_smake'">
-                <set var="__copy_depends" eval="0">
-                    $(''.join(['$(__srcdir)%s ' % (x) for x in __files.split()]))
-                </set>
-                <set var="__deps" append="1">$(__copy_depends)</set>
-                <set var="__copy_script_name">$(FORMAT)_copy_$(id).bat</set>
-            </if>
-
-            <set var="__copy_cmd" eval="0">
-
-                <if cond="TOOLSET=='unix'">
-                    @mkdir -p $(__dstdir)
-                    @for f in $(__files); do \
-                        if test ! -f $(__dstdir)/$(DOLLAR)$(DOLLAR)f -a ! -d $(__dstdir)/$(DOLLAR)$(DOLLAR)f ; \
-                        then x=yep ; \
-                        else x=`find $(__srcdir)$(DOLLAR)$(DOLLAR)f -newer $(__dstdir)/$(DOLLAR)$(DOLLAR)f -print` ; \
-                        fi; \
-                        case "$(DOLLAR)$(DOLLAR)x" in ?*) \
-                            cp -pRf $(__srcdir)$(DOLLAR)$(DOLLAR)f $(__dstdir) ;; \
-                        esac; \
-                    done
-                </if>
-
-                <if cond="TOOLSET in ['win32','os2','dos'] and FORMAT!='mingw' and FORMAT!='dmars_smake'">
-                    if not exist $(__dstdir) mkdir $(__dstdir)
-                    for %f in ($(__files)) do if not exist $(__dstdir)\%f copy $(__srcdir)%f $(__dstdir)
-                </if>
-                <if cond="TOOLSET=='win32' and FORMAT=='dmars_smake'">
-                    if not exist $(__dstdir) mkdir $(__dstdir)
-                    echo copy $(__srcdir)%%1 $(__dstdir)\%%1 &gt; $(__copy_script_name)
-                    !$(__copy_script_name) $**
-                    del $(__copy_script_name)
-                </if>
-                <if cond="TOOLSET=='win32' and FORMAT=='mingw'">
-                    if not exist $(__dstdir) mkdir $(__dstdir)
-                    for %%f in ($(__files)) do if not exist $(__dstdir)\%%f copy $(__srcdir)%%f $(__dstdir)
-                </if>
-
-            </set>
-            <command>$(__copy_cmd)</command>
-        </template>
-        <define-tag name="dstdir">
-            <set var="__dstdir">$(nativePaths(value))</set>
-        </define-tag>
-        <define-tag name="srcdir">
-            <set var="__srcdir">$(nativePaths(value))$(DIRSEP)</set>
-        </define-tag>
-        <define-tag name="files">
-            <set var="__files">$(' '.join(value.split()))</set>
-        </define-tag>
-    </define-rule>
-
-    <define-rule name="copy-file-to-file" extends="action">
-        <template>
-            <set var="__copy_cmd" eval="0">
-                <if cond="TOOLSET=='unix'">
-                    cp -pf $(__file) $(__dest)
-                </if>
-                <if cond="TOOLSET in ['win32','os2','dos']">
-                    copy $(__file) $(__dest)
-                </if>
-            </set>
-            <command>$(__copy_cmd)</command>
-        </template>
-        <define-tag name="dst">
-            <set var="__dest">$(nativePaths(value))</set>
-            <set var="__targetname">$(__dest)</set>
-        </define-tag>
-        <define-tag name="src">
-            <set var="__file">$(nativePaths(value))</set>
-            <depends-on-file>$(value)</depends-on-file>
-        </define-tag>
-    </define-rule>
-
-    <define-rule name="copy-file-to-file-if-not-exist" extends="action">
-        <template>
-            <set var="__copy_cmd" eval="0">
-                <if cond="TOOLSET=='unix'">
-                    @if test ! -s $(__dest) ; then \
-                        cp -pf $(__file) $(__dest)
-                    fi; \
-                </if>
-                <if cond="TOOLSET in ['win32','os2','dos']">
-                    if not exist $(__dest) copy $(__file) $(__dest)
-                </if>
-            </set>
-            <command>$(__copy_cmd)</command>
-        </template>
-        <define-tag name="dst">
-            <set var="__dest">$(nativePaths(value))</set>
-            <set var="__targetname">$(__dest)</set>
-        </define-tag>
-        <define-tag name="src">
-            <set var="__file">$(nativePaths(value))</set>
-        </define-tag>
-    </define-rule>
-
-
-    <define-rule name="mkdir" extends="action">
-        <define-tag name="dir">
-            <set var="__targetname">$(nativePaths(value))</set>
-            <command cond="TOOLSET=='unix'">
-                @mkdir -p $(__targetname)
-            </command>
-            <command cond="TOOLSET in ['win32','os2','dos']">
-                if not exist $(__targetname) mkdir $(__targetname)
-            </command>
-        </define-tag>
-    </define-rule>
-
-
-    <!-- FIXME: DEPRECATED
-         deprecated stuff (will be removed in future versions): -->
-
-    <!-- Convenience rule for C/C++ header files to be installed: -->
-    <define-rule name="headers" extends="mydata-files-tree" pseudo="1"> 	 
-        <template> 	 
-            <warning>
-                &lt;headers&gt; rule is deprecated and will be removed, use per-target &lt;headers&gt; tag instead.
-            </warning>
-            <srcdir>$(SRCDIR)</srcdir> 	 
-            <install-to>$(INCLUDEDIR)</install-to> 	 
-        </template> 	 
-    </define-rule>
-
-</makefile>
diff --git a/.build/wxpresets.m4 b/.build/wxpresets.m4
deleted file mode 100755
index c898e19..0000000
--- a/.build/wxpresets.m4
+++ /dev/null
@@ -1,681 +0,0 @@
-dnl ---------------------------------------------------------------------------
-dnl Author:          Francesco Montorsi
-dnl                  (contributions by David Hart)
-dnl Creation date:   13/9/2005
-dnl RCS-ID:          $Id: wxpresets.m4,v 1.8 2005/12/31 11:30:14 frm Exp $
-dnl Purpose:         Some M4 macros which makes *much* easier writing the
-dnl                  configure.ac files for build system based on wxpresets
-dnl ---------------------------------------------------------------------------
-
-
-dnl ---------------------------------------------------------------------------
-dnl Macros for wxWidgets build configuration detection.
-dnl Typically used in configure.in/ac as:
-dnl
-dnl     # basic configure checks
-dnl     ...
-dnl
-dnl     # required library checks
-dnl     AM_WXPRESETS_FULL([2.6.1], [net,xrc,stc])
-dnl     ...
-dnl
-dnl     # write the output files
-dnl     AC_BAKEFILE([m4_incl ude(autoconf_inc.m4)])
-dnl     AC_CONFIG_FILES([Makefile ...])
-dnl     AC_OUTPUT
-dnl
-dnl     # end of the configure.in script
-dnl     AM_WXPRESETS_MSG        # optional: just to show a message to the user
-dnl
-dnl ---------------------------------------------------------------------------
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_YESNO_OPTCHECK([name of the boolean variable to set],
-dnl                   [name of the --enable-option variable with yes/no values],
-dnl                   [name of the --enable option])
-dnl
-dnl Converts the $3 variable, suppose to contain a yes/no value to a 1/0
-dnl boolean variable and saves the result into $1.
-dnl Outputs also the standard checking-option message.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_YESNO_OPTCHECK],
-        [
-        AC_MSG_CHECKING([for $3 option])
-        if [[ "x$$2" = "xyes" ]]; then
-            AC_MSG_RESULT([yes])
-            $1=1
-        else
-            AC_MSG_RESULT([no])
-            $1=0
-        fi
-    ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXFLAGS_CONTAIN / AM_WXSELECTEDCONFIG_CONTAIN ([RESULTVAR], [STRING])
-dnl
-dnl Sets to nonzero the variable named "WX_$RESULTVAR" if the wxWidgets
-dnl additional CPP flags (taken from $WX_CPPFLAGS) contain the given STRING.
-dnl Otherwise the variable will be set to 0.
-dnl
-dnl NOTE: 'expr match STRING REGEXP' cannot be used since on Mac it doesn't work;
-dnl       we'll use 'expr STRING : REGEXP' instead
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXFLAGS_CONTAIN],
-        [
-        WX_$1=$(expr "$WX_CPPFLAGS" : ".*$2.*")
-    ])
-
-AC_DEFUN([AM_WXSELECTEDCONFIG_CONTAIN],
-        [
-        WX_$1=$(expr "$WX_SELECTEDCONFIG" : ".*$2.*")
-    ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXFLAGS_CHECK([RESULTVAR], [STRING], [MSG] [, ACTION-IF-FOUND
-dnl                                               [, ACTION-IF-NOT-FOUND]])
-dnl
-dnl Outputs the given MSG. Then searches the given STRING in the wxWidgets
-dnl additional CPP flags and put the result of the search in WX_$RESULTVAR
-dnl also adding the "yes" or "no" message result to MSG.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXFLAGS_CHECK],
-        [
-        if test "$$1" = "wxlike" ; then
-
-            dnl The user does not have particular preferences for this option;
-            dnl so we will detect the wxWidgets relative build setting and will use it
-            AC_MSG_CHECKING([$3])
-            AM_WXFLAGS_CONTAIN([$1], [$2])
-            if test "$WX_$1" != "0"; then
-                WX_$1=1
-                AC_MSG_RESULT([yes])
-                ifelse([$4], , :, [$4])
-            else
-                WX_$1=0
-                AC_MSG_RESULT([no])
-                ifelse([$5], , :, [$5])
-            fi
-        else
-
-            dnl Use the setting given by the user
-            WX_$1=$$1
-        fi
-    ])
-
-AC_DEFUN([AM_WXSELECTEDCONFIG_CHECK],
-        [
-        if test "$$1" = "wxlike" ; then
-
-            dnl The user does not have particular preferences for this option;
-            dnl so we will detect the wxWidgets relative build setting and will use it
-            AC_MSG_CHECKING([$3])
-            AM_WXSELECTEDCONFIG_CONTAIN([$1], [$2])
-            if test "$WX_$1" != "0"; then
-                WX_$1=1
-                AC_MSG_RESULT([yes])
-                ifelse([$4], , :, [$4])
-            else
-                WX_$1=0
-                AC_MSG_RESULT([no])
-                ifelse([$5], , :, [$5])
-            fi
-        else
-
-            dnl Use the setting given by the user
-            WX_$1=$$1
-        fi
-    ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS_CHECK([minimum-wx-version], [])
-dnl
-dnl Sets the WX_UNICODE, WX_DEBUG, WX_SHARED, WX_VERSION variables to the right
-dnl values looking at the current $WX_CPPFLAGS variable.
-dnl To set the $WX_CPPFLAGS variable you need to use AM_PATH_WXCONFIG first.
-dnl
-dnl Then sets the WX_GTKPORT, WX_MOTIFPORT, WX_MACPORT, WXX11PORT, WXMGLPORT, WXMSWPORT
-dnl flags to 1 or 0 to match the current wxWidgets port used.
-dnl Also sets the WX_PORT var to one of gtk,motif,mac,x11,mgl,msw values.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS_CHECK],
-        [
-        dnl be sure that the WX_VERSION macro has the same format of the WX_VERSION option
-        dnl which is used by wx_win32.bkl (i.e. 25, 26, 27... instead of 2.5.x, 2.6.x, 2.7.x...)
-        wx_config_major_version=`echo $WX_VERSION | \
-           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
-        wx_config_minor_version=`echo $WX_VERSION | \
-           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
-        WX_VERSION=$wx_config_major_version$wx_config_minor_version
-
-
-        dnl FOR DEBUG ONLY
-        if test "$DBG_CONFIGURE" = "1"; then
-            echo "WX_VERSION: $WX_VERSION"
-        fi
-
-
-        if test $WX_VERSION -gt 26 ; then
-
-            dnl The wx-config we are using understands the "--selected_config" option
-            dnl which returns an easy-parsable string !
-
-            WX_SELECTEDCONFIG=$($WX_CONFIG_WITH_ARGS --selected_config)
-
-            dnl FOR DEBUG ONLY
-            if test "$DBG_CONFIGURE" = "1"; then
-                echo "Using wx-config --selected_config; WX_SELECTEDCONFIG: $WX_SELECTEDCONFIG"
-            fi
-
-
-            AM_WXSELECTEDCONFIG_CHECK([UNICODE], [unicode], [if wxWidgets was built with UNICODE enabled])
-            AM_WXSELECTEDCONFIG_CHECK([DEBUG], [debug], [if wxWidgets was built in DEBUG mode])
-
-            dnl we could test directly for WX_SHARED with a line like:
-            dnl    AM_WXSELECTEDCONFIG_CHECK([SHARED], [shared], [if wxWidgets was built in SHARED mode])
-            dnl since wx-config --selected-config outputs the 'shared' word when wx was built in shared mode.
-            dnl However that wouldn't work since we define the '--enable-static' option and not the
-            dnl '--enable-shared' option (just as wx does) and thus at this point we have an empty WX_SHARED
-            dnl variable; the right variable to use is WX_STATIC which is initialized to 'wxlike' here...
-            AM_WXSELECTEDCONFIG_CHECK([STATIC], [static], [if wxWidgets was built in STATIC mode])
-            if test "$WX_STATIC" != "0"; then
-                WX_SHARED=0
-            else
-                WX_SHARED=1
-            fi
-
-            dnl checks for the wx port used
-            WX_PORT="unknown"
-            AM_WXSELECTEDCONFIG_CHECK([GTKPORT], [gtk], [if wxWidgets port is wxGTK], [WX_PORT="gtk"])
-            AM_WXSELECTEDCONFIG_CHECK([MOTIFPORT], [motif], [if wxWidgets port is wxMotif], [WX_PORT="motif"])
-            AM_WXSELECTEDCONFIG_CHECK([MACPORT], [mac], [if wxWidgets port is wxMac], [WX_PORT="mac"])
-            AM_WXSELECTEDCONFIG_CHECK([X11PORT], [x11], [if wxWidgets port is wxX11], [WX_PORT="x11"])
-            AM_WXSELECTEDCONFIG_CHECK([MGLPORT], [mgl], [if wxWidgets port is wxMGL], [WX_PORT="mgl"])
-            AM_WXSELECTEDCONFIG_CHECK([MSWPORT], [msw], [if wxWidgets port is wxMSW], [WX_PORT="msw"])
-
-            dnl in case we are using wxGTK check if we are using GTK 1.x, GTK 2.x or GTK 3.x;
-            dnl the user will be able to find the result of the check in the $WX_GTKPORT_VERSION variable
-            if test "$WX_PORT" = "gtk"; then
-                TEMP=wxlike
-                AM_WXSELECTEDCONFIG_CHECK([TEMP], [gtk2], [if wxGTK uses GTK 2.x],
-                                        [WX_GTKPORT_VERSION=2], [WX_GTKPORT_VERSION=1])
-                dnl Nowadays the default value 'gtk1.2' is decreasingly-plausible, so:
-                if test "$WX_GTKPORT_VERSION" = "1"; then
-                    AM_WXSELECTEDCONFIG_CHECK([TEMP], [gtk3], [if wxGTK uses GTK 3.x],
-                          [WX_GTKPORT_VERSION=3], [WX_GTKPORT_VERSION=1])
-                fi
-            fi
-        else
-
-            dnl FOR DEBUG ONLY
-            if test "$DBG_CONFIGURE" = "1"; then
-                echo "Using WX_CPPFLAGS: $WX_CPPFLAGS"
-            fi
-
-            dnl Before wx2.6.2, wx-config did not have the "--selected_config" option...
-            dnl thus we need to extract the info we need from $WX_CPPFLAGS...
-
-            AM_WXFLAGS_CHECK([UNICODE], [unicode], [if wxWidgets was built with UNICODE enabled])
-            AM_WXFLAGS_CHECK([DEBUG], [__WXDEBUG__], [if wxWidgets was built in DEBUG mode])
-            AM_WXFLAGS_CHECK([STATIC], [static], [if wxWidgets was built in STATIC mode])
-            if test "$WX_STATIC" != "0"; then
-                WX_SHARED=0
-            else
-                WX_SHARED=1
-            fi
-
-            dnl checks for the wx port used
-            WX_PORT="unknown"
-            AM_WXFLAGS_CHECK([GTKPORT], [__WXGTK__], [if wxWidgets port is wxGTK], [WX_PORT="gtk"])
-            AM_WXFLAGS_CHECK([MOTIFPORT], [__WXMOTIF__], [if wxWidgets port is wxMotif], [WX_PORT="motif"])
-            AM_WXFLAGS_CHECK([MACPORT], [__WXMAC__], [if wxWidgets port is wxMac], [WX_PORT="mac"])
-            AM_WXFLAGS_CHECK([X11PORT], [__WXX11__], [if wxWidgets port is wxX11], [WX_PORT="x11"])
-            AM_WXFLAGS_CHECK([MGLPORT], [__WXMGL__], [if wxWidgets port is wxMGL], [WX_PORT="mgl"])
-            AM_WXFLAGS_CHECK([MSWPORT], [__WXMSW__], [if wxWidgets port is wxMSW], [WX_PORT="msw"])
-
-            dnl in case we are using wxGTK check if we are using GTK 1.x or GTK 2.x;
-            dnl the user will be able to find the result of the check in the $WX_GTKPORT_VERSION variable
-            if test "$WX_PORT" = "gtk"; then
-                TEMP=wxlike
-                AM_WXFLAGS_CHECK([TEMP], [gtk2], [if wxGTK uses GTK 2.x (instead of GTK 1.x)],
-                                        [WX_GTKPORT_VERSION=2], [WX_GTKPORT_VERSION=1])
-            fi
-        fi
-
-
-        dnl FOR DEBUG ONLY
-        if test "$DBG_CONFIGURE" = "1"; then
-            echo "WX_SHARED: $WX_SHARED, WX_DEBUG: $WX_DEBUG, WX_UNICODE: $WX_UNICODE"
-            echo "WX_GTKPORT: $WX_GTKPORT, WX_MOTIFPORT: $WX_MOTIFPORT, WX_MACPORT: $WX_MACPORT, "
-            echo "WX_X11PORT: $WX_X11PORT, WX_MGLPORT: $WX_MGLPORT, WX_MSWPORT: $WX_MSWPORT"
-            echo "WX_PORT: $WX_PORT"
-            echo "WX_GTKPORT_VERSION: $WX_GTKPORT_VERSION"
-        fi
-
-
-        dnl nice way to check:
-        dnl - that only one of the WX_*PORT variables has been set to 1
-        dnl - at least one of the WX_*PORT has been set !
-
-        if test "$WX_PORT" = "unknown" -a "$PORT" = "wxlike" ; then
-            AC_MSG_ERROR([
-                           Cannot detect the currently installed wxWidgets port !
-                           Check your 'wx-config --cxxflags'...
-                         ])
-        fi
-
-        checksum="$(expr $WX_GTKPORT + $WX_MOTIFPORT + $WX_MACPORT + $WX_X11PORT + $WX_MGLPORT + $WX_MSWPORT)"
-        if test "$checksum" = "0" ; then
-            AC_MSG_ERROR([
-                           Cannot detect the currently installed wxWidgets port !
-                           Check your 'wx-config --cxxflags'...
-                         ])
-        fi
-        if test "$checksum" != "1" ; then
-            AC_MSG_ERROR([
-                           Your 'wx-config --cxxflags' command seems to define more than one port symbol...
-                           check your wxWidgets installation (the 'wx-config --list' command may help).
-                         ])
-        fi
-    ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS_MSG
-dnl
-dnl Shows a summary message to the user about the WX_* variable contents.
-dnl This macro is used typically at the end of the configure script.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS_MSG],
-        [
-        if test "$WX_DEBUG" = "1" ; then
-            echo "  - DEBUG build"
-        elif test "$WX_DEBUG" = "0" ; then
-            echo "  - RELEASE build"
-        else
-            echo "  Error in this configure script ! Please contact $PACKAGE_BUGREPORT"
-        fi
-        if test "$WX_UNICODE" = "1" ; then
-            echo "  - UNICODE mode"
-        elif test "$WX_UNICODE" = "0" ; then
-            echo "  - ANSI mode"
-        else
-            echo "  Error in this configure script ! Please contact $PACKAGE_BUGREPORT"
-        fi
-        if test "$WX_SHARED" = "1" ; then
-            echo "  - SHARED mode"
-        elif test "$WX_SHARED" = "0" ; then
-            echo "  - STATIC mode"
-        else
-            echo "  Error in this configure script ! Please contact $PACKAGE_BUGREPORT"
-        fi
-        echo "  - VERSION: $WX_VERSION"
-
-        if test "$WX_PORT" = "gtk"; then
-            if test "$WX_GTKPORT_VERSION" = "1"; then
-                echo "  - PORT: gtk (with GTK+ 1.x)"
-            elif test "$WX_GTKPORT_VERSION" = "2" ; then
-                echo "  - PORT: gtk (with GTK+ 2.x)"
-            elif test "$WX_GTKPORT_VERSION" = "3" ; then
-                echo "  - PORT: gtk (with GTK+ 3.x)"
-            else
-                echo "  Error in this configure script ! Please contact $PACKAGE_BUGREPORT"
-            fi
-        else
-            echo "  - PORT: $WX_PORT"
-        fi
-    ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl WX_ARG_ENABLE/WX_ARG_WITH
-dnl
-dnl Two little custom macros which define the ENABLE/WITH configure arguments.
-dnl Macro arguments:
-dnl $1 = the name of the --enable / --with  feature
-dnl $2 = the name of the variable associated
-dnl $3 = the description of that feature
-dnl $4 = the default value for that feature
-dnl $5 = additional action to do in case option is given with "yes" value
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([WX_ARG_ENABLE],
-         [AC_ARG_ENABLE($1,
-            AC_HELP_STRING([--enable-$1], [$3 (default is $4)]),
-            [], [enableval="$4"])
-
-            dnl Show a message to the user about this option
-            AC_MSG_CHECKING([for the --enable-$1 option])
-            if test "$enableval" = "yes" ; then
-                AC_MSG_RESULT([yes])
-                $2=1
-                $5
-            elif test "$enableval" = "no" ; then
-                AC_MSG_RESULT([no])
-                $2=0
-            elif test "$enableval" = "wxlike" ; then
-                AC_MSG_RESULT([will be detected from wxWidgets])
-                $2="wxlike"
-            else
-                AC_MSG_ERROR([unrecognized option value (allowed values: yes, no, wxlike) !])
-            fi
-         ])
-
-AC_DEFUN([WX_ARG_WITH],
-         [AC_ARG_WITH($1,
-            AC_HELP_STRING([--with-$1], [$3 (default is $4)]),
-            [], [withval="$4"])
-
-            dnl Show a message to the user about this option
-            AC_MSG_CHECKING([for the --with-$1 option])
-            if test "$withval" = "yes" ; then
-                AC_MSG_RESULT([yes])
-                $2=1
-                $5
-dnl NB: we don't allow --with-gtk=no option since it does not make much sense !
-dnl            elif test "$withval" = "no" ; then
-dnl                AC_MSG_RESULT([no])
-dnl                $2=0
-            elif test "$withval" = "wxlike" ; then
-                AC_MSG_RESULT([will be detected from wxWidgets])
-                $2="wxlike"
-            else
-                AC_MSG_ERROR([unrecognized option value (allowed values: yes, wxlike) !])
-            fi
-         ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_OPTIONS_WXPRESETS
-dnl
-dnl Gives to the configure script the following options:
-dnl   --enable-static
-dnl   --enable-debug
-dnl   --enable-unicode
-dnl checks for their presence and eventually set the SHARED,DEBUG,UNICODE
-dnl variables accordingly.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_OPTIONS_WXPRESETS],
-        [
-
-        dnl The default values (and also option names) are the same of wx's ones
-        WX_ARG_ENABLE([static], [STATIC], [Builds in static mode], [wxlike])
-        WX_ARG_ENABLE([unicode], [UNICODE], [Builds in unicode mode], [wxlike])
-        WX_ARG_ENABLE([debug], [DEBUG], [Builds in debug mode], [wxlike])
-
-        PORT="wxlike"
-        WX_ARG_WITH([motif], [MOTIFPORT], [Uses the wxMotif port], [wxlike], [PORT="motif"])
-        WX_ARG_WITH([gtk], [GTKPORT], [Uses the wxGTK port], [wxlike], [PORT="gtk"])
-        WX_ARG_WITH([x11], [X11PORT], [Uses the wxX11 port], [wxlike], [PORT="x11"])
-        WX_ARG_WITH([mac], [MACPORT], [Uses the wxMac port], [wxlike], [PORT="mac"])
-        WX_ARG_WITH([mgl], [MGLPORT], [Uses the wxMGL port], [wxlike], [PORT="mgl"])
-
-        dnl In case we are on Cygwin !
-        WX_ARG_WITH([msw], [MSWPORT], [Uses the wxMSW port], [wxlike], [PORT="msw"])
-
-        dnl nice way to check:
-        dnl - that only one of the *PORT variables has been set to 1
-        dnl - at least one of the *PORT has been set !
-
-        dnl FOR DEBUG ONLY
-        if test "$DBG_CONFIGURE" = "1"; then
-            echo "STATIC: $STATIC, DEBUG: $DEBUG, UNICODE: $UNICODE, PORT: $PORT"
-            echo "GTKPORT: $GTKPORT, X11PORT: $X11PORT, MACPORT: $MACPORT, MOTIFPORT: $MOTIFPORT, MGLPORT: $MGLPORT"
-            echo "PORT: $PORT"
-        fi
-    ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_CONVERT_WXPRESETS_OPTIONS_TO_WXCONFIG_FLAGS
-dnl
-dnl Sets the WXCFG_FLAGS string using the SHARED,DEBUG,UNICODE variable values
-dnl which are different from "wxlike"
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_CONVERT_WXPRESETS_OPTIONS_TO_WXCONFIG_FLAGS],
-        [
-
-        dnl The space at the end of the WXCFG_FLAGS is important; do not remove !
-        if test "$STATIC" = "1" ; then
-            WXCFG_FLAGS="--static=yes "
-        elif test "$STATIC" = "0" ; then
-            WXCFG_FLAGS="--static=no "
-        fi
-
-        if test "$DEBUG" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--debug=yes "
-        elif test "$DEBUG" = "0" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--debug=no "
-        fi
-
-        if test "$UNICODE" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--unicode=yes "
-        elif test "$UNICODE" = "0" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--unicode=no "
-        fi
-
-        if test "$GTKPORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=gtk2 "
-        elif test "$MOTIFPORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=motif "
-        elif test "$X11PORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=x11 "
-        elif test "$MACPORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=mac "
-        elif test "$MGLPORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=mgl "
-        elif test "$MSWPORT" = "1" ; then
-            WXCFG_FLAGS="$WXCFG_FLAGS""--toolkit=msw "
-        fi
-
-
-        dnl FOR DEBUG ONLY
-        if test "$DBG_CONFIGURE" = "1"; then
-            echo "WXCFG_FLAGS: $WXCFG_FLAGS"
-        fi
-    ])
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_GET_GTK_FLAGS
-dnl
-dnl When using the wxGTK port, this macro creates a GTKPKG_FLAGS variable that
-dnl contains the c flags (-I and -D flags) required to compile a program which
-dnl uses directly the GTK libraries (instead using the wx layer).
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_GET_GTK_FLAGS],
-        [
-            if test "$WX_PORT" = "gtk" ; then
-                dnl The commands below were taken from usenet postings by John Labenski
-                dnl NB Trying to do GTKPKG_FLAGS=`gtk-config --cflags` fails, you have
-                dnl    to use an intermediate var
-                if test "$WX_GTKPORT_VERSION" = "1" ; then
-                    _GTKPKG_FL="gtk-config --cflags"
-                    GTKPKG_FLAGS=`$_GTKPKG_FL`
-                elif test "$WX_GTKPORT_VERSION" = "3" ; then
-                    _GTKPKG_FL="pkg-config --cflags gtk+-3.0"
-                    GTKPKG_FLAGS=`$_GTKPKG_FL`
-                else
-                    _GTKPKG_FL="pkg-config --cflags gtk+-2.0"
-                    GTKPKG_FLAGS=`$_GTKPKG_FL`
-                fi
-            fi
-        ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS([minimum-wx-version], [addwxlibraries], [addgtkflags])
-dnl
-dnl where "addwxlibraries" are those wxWidgets libraries (when wx is built
-dnl in multilib mode) required by the program to link (e.g. xml,xrc,net,odbc,etc);
-dnl the core & base libraries are included by default.
-dnl
-dnl Just a convenience macro for
-dnl  AM_PATH_WXCONFIG([minimum-wx-version], [], [], [addwxlibraries])
-dnl  AM_WXPRESETS_CHECK
-dnl  AM_GET_GTK_FLAGS   (only when addgtkflags != '')
-dnl macros.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS],
-         [
-            dnl From --enable-* options set by AM_OPTIONS_WXPRESETS, create the
-            dnl WXCFG_FLAGS string to give to wx-config
-            AM_CONVERT_WXPRESETS_OPTIONS_TO_WXCONFIG_FLAGS
-
-            AM_PATH_WXCONFIG([$1], [wxWin=1], [wxWin=0], [$2,core,base], [$WXCFG_FLAGS])
-            if test "$wxWin" != 1; then
-                AC_MSG_ERROR([
-    The requested wxWidgets build couldn't be found.
-
-    Try to use the default build of wxWidgets
-    (try the command 'wx-config --list'); i.e. leave
-    the --enable-unicode, --enable-static, --enable-debug
-    and --with-* options to their default values.
-
-    If you still get this error, then check that 'wx-config' is
-    in path, the directory where wxWidgets libraries are installed
-    (returned by 'wx-config --libs' command) is in LD_LIBRARY_PATH
-    or equivalent variable and wxWidgets version is $1 or above.
-                ])
-            else
-                dnl do not update CPPFLAGS nor CXXFLAGS doing something like:
-                dnl       CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
-                dnl       CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS"
-                dnl otherwise we'll get the
-                dnl same settings repetead three times since wxpresets generate a
-                dnl Makefile.in which merges these two variables with $WX_CPPFLAGS
-                dnl automatically...
-                dnl CFLAGS="$CFLAGS $WX_CFLAGS_ONLY"
-                dnl LIBS="$LIBS $WX_LIBS"
-
-                dnl FOR DEBUG ONLY
-                if test "$DBG_CONFIGURE" = "1"; then
-                    echo "WX_LIBS: $WX_LIBS"
-                fi
-            fi
-
-            dnl Synch our WX_DEBUG,WX_UNICODE,WX_SHARED variables with wx ones
-            AM_WXPRESETS_CHECK
-
-            dnl It doesn't matter what "gtkaddflags" parameter contains,
-            dnl if it's non-empty it's true
-            if test -n "$3" ; then
-                dnl Add gtk-specific flags (useful when compiling wx sources
-                dnl that directly use the GTK libraries)
-                AM_GET_GTK_FLAGS
-
-                dnl Update global flags
-                CXXFLAGS="$CXXFLAGS $GTKPKG_FLAGS"
-                CFLAGS="$CFLAGS $GTKPKG_FLAGS"
-            fi
-        ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS_FULL([minimum-wx-version], [addwxlibraries], [addgtkflags])
-dnl
-dnl Like AM_WXPRESETS but this macro also does those standard checks
-dnl to recognize the system and the installed utility programs
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS_FULL],
-        [
-            dnl This allows us to use Bakefile, recognizing the system type
-            dnl (and sets the AC_CANONICAL_BUILD, AC_CANONICAL_HOST and
-            dnl AC_CANONICAL_TARGET variables)
-            AC_CANONICAL_SYSTEM
-
-            dnl we set these vars to avoid that the AC_PROG_C* macros add the "-g -O2" flags;
-            dnl we will add them later, if needed
-            CFLAGS=
-            CXXFLAGS=
-            CPPFLAGS=
-
-            dnl Checks for basic programs used to compile/install.
-            AC_PROG_AWK
-            AC_PROG_INSTALL
-            AC_PROG_LN_S
-            AC_PROG_RANLIB
-            AC_PROG_CC
-            AC_PROG_CXX
-            AC_PROG_CXXCPP
-
-            dnl check for wxWidgets library and initialization of WX_* variables
-            AM_WXPRESETS([$1], [$2], [$3])
-
-            dnl add the optimize/debug flags
-            dnl NOTE1: these checks must be put after AM_WXPRESETS (which sets the $WX_* variables)...
-            dnl NOTE2: the CXXFLAGS are merged together with the CPPFLAGS so we don't need to set them, too
-            if [[ "$WX_DEBUG" = "1" ]]; then
-
-                dnl NOTE: the -Wundef and -Wno-ctor-dtor-privacy are not enabled automatically by -Wall
-                dnl NOTE2: the '-Wno-ctor-dtor-privacy' has sense only when compiling C++ source files
-                dnl        and thus we must be careful to add it only to CXXFLAGS and not to CFLAGS
-                dnl        (remember that CPPFLAGS is reserved for both C and C++ compilers while
-                dnl         CFLAGS is intended as flags for C compiler only and CXXFLAGS for C++ only)
-                CXXFLAGS="$CXXFLAGS -g -O0 -Wall -Wundef -Wno-ctor-dtor-privacy"
-                CFLAGS="$CFLAGS -g -O0 -Wall -Wundef"
-            else
-                dnl DH NOTE: I've added the -DNDEBUG to turn of asserts in release builds against wx3
-                CXXFLAGS="$CXXFLAGS -O2 -DNDEBUG"
-                CFLAGS="$CFLAGS -O2 -DNDEBUG"
-            fi
-        ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS_MSG_BEGIN
-dnl
-dnl Like AM_WXPRESETS_MSG but this macro also gives info about the configuration
-dnl of the package which used the wxpresets.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS_MSG_BEGIN],
-        [
-            echo
-            echo " ----------------------------------------------------------------"
-            echo "  Configuration for $PACKAGE_NAME $PACKAGE_VERSION successfully completed."
-            echo "  Summary of main configuration settings for $PACKAGE_NAME:"
-            if [[ "$WX_DEBUG" = "1" ]]; then
-                echo "  - DEBUG build"
-            else
-                echo "  - RELEASE build"
-            fi
-            if [[ "$WX_UNICODE" = "1" ]]; then
-                echo "  - UNICODE mode"
-            else
-                echo "  - ANSI mode"
-            fi
-            if [[ "$WX_SHARED" = "1" ]]; then
-                echo "  - SHARED mode"
-            else
-                echo "  - STATIC mode"
-            fi
-        ])
-
-
-
-dnl ---------------------------------------------------------------------------
-dnl AM_WXPRESETS_MSG_END
-dnl
-dnl Like AM_WXPRESETS_MSG but this macro also gives info about the configuration
-dnl of the package which used the wxpresets.
-dnl ---------------------------------------------------------------------------
-AC_DEFUN([AM_WXPRESETS_MSG_END],
-        [
-            echo
-            echo "  The wxWidgets build which will be used by $PACKAGE_NAME $PACKAGE_VERSION"
-            echo "  has the following settings:"
-            AM_WXPRESETS_MSG
-            echo
-            echo "  Now, just run make."
-            echo " ----------------------------------------------------------------"
-            echo
-        ])
-
-
diff --git a/.build/wxwin.m4 b/.build/wxwin.m4
new file mode 100644
index 0000000..2c639da
--- /dev/null
+++ b/.build/wxwin.m4
@@ -0,0 +1,1049 @@
+dnl ---------------------------------------------------------------------------
+dnl Author:          wxWidgets development team,
+dnl                  Francesco Montorsi,
+dnl                  Bob McCown (Mac-testing)
+dnl Creation date:   24/11/2001
+dnl ---------------------------------------------------------------------------
+
+dnl ===========================================================================
+dnl Table of Contents of this macro file:
+dnl -------------------------------------
+dnl
+dnl SECTION A: wxWidgets main macros
+dnl  - WX_CONFIG_OPTIONS
+dnl  - WX_CONFIG_CHECK
+dnl  - WXRC_CHECK
+dnl  - WX_STANDARD_OPTIONS
+dnl  - WX_CONVERT_STANDARD_OPTIONS_TO_WXCONFIG_FLAGS
+dnl  - WX_DETECT_STANDARD_OPTION_VALUES
+dnl
+dnl SECTION B: wxWidgets-related utilities
+dnl  - WX_LIKE_LIBNAME
+dnl  - WX_ARG_ENABLE_YESNOAUTO
+dnl  - WX_ARG_WITH_YESNOAUTO
+dnl
+dnl SECTION C: messages to the user
+dnl  - WX_STANDARD_OPTIONS_SUMMARY_MSG
+dnl  - WX_STANDARD_OPTIONS_SUMMARY_MSG_BEGIN
+dnl  - WX_STANDARD_OPTIONS_SUMMARY_MSG_END
+dnl  - WX_BOOLOPT_SUMMARY
+dnl
+dnl The special "WX_DEBUG_CONFIGURE" variable can be set to 1 to enable extra
+dnl debug output on stdout from these macros.
+dnl ===========================================================================
+
+
+dnl ---------------------------------------------------------------------------
+dnl Macros for wxWidgets detection. Typically used in configure.in as:
+dnl
+dnl     AC_ARG_ENABLE(...)
+dnl     AC_ARG_WITH(...)
+dnl        ...
+dnl     WX_CONFIG_OPTIONS
+dnl        ...
+dnl        ...
+dnl     WX_CONFIG_CHECK([2.6.0], [wxWin=1])
+dnl     if test "$wxWin" != 1; then
+dnl        AC_MSG_ERROR([
+dnl                wxWidgets must be installed on your system
+dnl                but wx-config script couldn't be found.
+dnl
+dnl                Please check that wx-config is in path, the directory
+dnl                where wxWidgets libraries are installed (returned by
+dnl                'wx-config --libs' command) is in LD_LIBRARY_PATH or
+dnl                equivalent variable and wxWidgets version is 2.3.4 or above.
+dnl        ])
+dnl     fi
+dnl     CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
+dnl     CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS_ONLY"
+dnl     CFLAGS="$CFLAGS $WX_CFLAGS_ONLY"
+dnl
+dnl     LIBS="$LIBS $WX_LIBS"
+dnl
+dnl If you want to support standard --enable-debug/unicode/shared options, you
+dnl may do the following:
+dnl
+dnl     ...
+dnl     AC_CANONICAL_SYSTEM
+dnl
+dnl     # define configure options
+dnl     WX_CONFIG_OPTIONS
+dnl     WX_STANDARD_OPTIONS([debug,unicode,shared,toolkit,wxshared])
+dnl
+dnl     # basic configure checks
+dnl     ...
+dnl
+dnl     # we want to always have DEBUG==WX_DEBUG and UNICODE==WX_UNICODE
+dnl     WX_DEBUG=$DEBUG
+dnl     WX_UNICODE=$UNICODE
+dnl
+dnl     WX_CONVERT_STANDARD_OPTIONS_TO_WXCONFIG_FLAGS
+dnl     WX_CONFIG_CHECK([2.8.0], [wxWin=1],,[html,core,net,base],[$WXCONFIG_FLAGS])
+dnl     WX_DETECT_STANDARD_OPTION_VALUES
+dnl
+dnl     # write the output files
+dnl     AC_CONFIG_FILES([Makefile ...])
+dnl     AC_OUTPUT
+dnl
+dnl     # optional: just to show a message to the user
+dnl     WX_STANDARD_OPTIONS_SUMMARY_MSG
+dnl
+dnl ---------------------------------------------------------------------------
+
+
+dnl ---------------------------------------------------------------------------
+dnl WX_CONFIG_OPTIONS
+dnl
+dnl adds support for --wx-prefix, --wx-exec-prefix, --with-wxdir and
+dnl --wx-config command line options
+dnl ---------------------------------------------------------------------------
+
+AC_DEFUN([WX_CONFIG_OPTIONS],
+[
+    AC_ARG_WITH(wxdir,
+                [  --with-wxdir=PATH       Use uninstalled version of wxWidgets in PATH],
+                [ wx_config_name="$withval/wx-config"
+                  wx_config_args="--inplace"])
+    AC_ARG_WITH(wx-config,
+                [  --with-wx-config=CONFIG wx-config script to use (optional)],
+                wx_config_name="$withval" )
+    AC_ARG_WITH(wx-prefix,
+                [  --with-wx-prefix=PREFIX Prefix where wxWidgets is installed (optional)],
+                wx_config_prefix="$withval", wx_config_prefix="")
+    AC_ARG_WITH(wx-exec-prefix,
+                [  --with-wx-exec-prefix=PREFIX
+                          Exec prefix where wxWidgets is installed (optional)],
+                wx_config_exec_prefix="$withval", wx_config_exec_prefix="")
+])
+
+dnl Helper macro for checking if wx version is at least $1.$2.$3, set's
+dnl wx_ver_ok=yes if it is:
+AC_DEFUN([_WX_PRIVATE_CHECK_VERSION],
+[
+    wx_ver_ok=""
+    if test "x$WX_VERSION" != x ; then
+      if test $wx_config_major_version -gt $1; then
+        wx_ver_ok=yes
+      else
+        if test $wx_config_major_version -eq $1; then
+           if test $wx_config_minor_version -gt $2; then
+              wx_ver_ok=yes
+           else
+              if test $wx_config_minor_version -eq $2; then
+                 if test $wx_config_micro_version -ge $3; then
+                    wx_ver_ok=yes
+                 fi
+              fi
+           fi
+        fi
+      fi
+    fi
+])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_CONFIG_CHECK(VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND
+dnl                  [, WX-LIBS [, ADDITIONAL-WX-CONFIG-FLAGS]]]])
+dnl
+dnl Test for wxWidgets, and define WX_C*FLAGS, WX_LIBS and WX_LIBS_STATIC
+dnl (the latter is for static linking against wxWidgets). Set WX_CONFIG_NAME
+dnl environment variable to override the default name of the wx-config script
+dnl to use. Set WX_CONFIG_PATH to specify the full path to wx-config - in this
+dnl case the macro won't even waste time on tests for its existence.
+dnl
+dnl Optional WX-LIBS argument contains comma- or space-separated list of
+dnl wxWidgets libraries to link against. If it is not specified then WX_LIBS
+dnl and WX_LIBS_STATIC will contain flags to link with all of the core
+dnl wxWidgets libraries.
+dnl
+dnl Optional ADDITIONAL-WX-CONFIG-FLAGS argument is appended to wx-config
+dnl invocation command in present. It can be used to fine-tune lookup of
+dnl best wxWidgets build available.
+dnl
+dnl Example use:
+dnl   WX_CONFIG_CHECK([2.6.0], [wxWin=1], [wxWin=0], [html,core,net]
+dnl                    [--unicode --debug])
+dnl ---------------------------------------------------------------------------
+
+dnl
+dnl Get the cflags and libraries from the wx-config script
+dnl
+AC_DEFUN([WX_CONFIG_CHECK],
+[
+  dnl do we have wx-config name: it can be wx-config or wxd-config or ...
+  if test x${WX_CONFIG_NAME+set} != xset ; then
+     WX_CONFIG_NAME=wx-config
+  fi
+
+  if test "x$wx_config_name" != x ; then
+     WX_CONFIG_NAME="$wx_config_name"
+  fi
+
+  dnl deal with optional prefixes
+  if test x$wx_config_exec_prefix != x ; then
+     wx_config_args="$wx_config_args --exec-prefix=$wx_config_exec_prefix"
+     WX_LOOKUP_PATH="$wx_config_exec_prefix/bin"
+  fi
+  if test x$wx_config_prefix != x ; then
+     wx_config_args="$wx_config_args --prefix=$wx_config_prefix"
+     WX_LOOKUP_PATH="$WX_LOOKUP_PATH:$wx_config_prefix/bin"
+  fi
+  if test "$cross_compiling" = "yes"; then
+     wx_config_args="$wx_config_args --host=$host_alias"
+  fi
+
+  dnl don't search the PATH if WX_CONFIG_NAME is absolute filename
+  if test -x "$WX_CONFIG_NAME" ; then
+     AC_MSG_CHECKING(for wx-config)
+     WX_CONFIG_PATH="$WX_CONFIG_NAME"
+     AC_MSG_RESULT($WX_CONFIG_PATH)
+  else
+     AC_PATH_PROG(WX_CONFIG_PATH, $WX_CONFIG_NAME, no, "$WX_LOOKUP_PATH:$PATH")
+  fi
+
+  if test "$WX_CONFIG_PATH" != "no" ; then
+    WX_VERSION=""
+
+    min_wx_version=ifelse([$1], ,2.2.1,$1)
+    if test -z "$5" ; then
+      AC_MSG_CHECKING([for wxWidgets version >= $min_wx_version])
+    else
+      AC_MSG_CHECKING([for wxWidgets version >= $min_wx_version ($5)])
+    fi
+
+    dnl don't add the libraries (4th argument) to this variable as this would
+    dnl result in an error when it's used with --version below
+    WX_CONFIG_WITH_ARGS="$WX_CONFIG_PATH $wx_config_args $5"
+
+    WX_VERSION=`$WX_CONFIG_WITH_ARGS --version 2>/dev/null`
+    wx_config_major_version=`echo $WX_VERSION | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
+    wx_config_minor_version=`echo $WX_VERSION | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
+    wx_config_micro_version=`echo $WX_VERSION | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
+
+    wx_requested_major_version=`echo $min_wx_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
+    wx_requested_minor_version=`echo $min_wx_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
+    wx_requested_micro_version=`echo $min_wx_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
+
+    _WX_PRIVATE_CHECK_VERSION([$wx_requested_major_version],
+                              [$wx_requested_minor_version],
+                              [$wx_requested_micro_version])
+
+    if test -n "$wx_ver_ok"; then
+      AC_MSG_RESULT(yes (version $WX_VERSION))
+      WX_LIBS=`$WX_CONFIG_WITH_ARGS --libs $4`
+
+      dnl is this even still appropriate?  --static is a real option now
+      dnl and WX_CONFIG_WITH_ARGS is likely to contain it if that is
+      dnl what the user actually wants, making this redundant at best.
+      dnl For now keep it in case anyone actually used it in the past.
+      AC_MSG_CHECKING([for wxWidgets static library])
+      WX_LIBS_STATIC=`$WX_CONFIG_WITH_ARGS --static --libs $4 2>/dev/null`
+      if test "x$WX_LIBS_STATIC" = "x"; then
+        AC_MSG_RESULT(no)
+      else
+        AC_MSG_RESULT(yes)
+      fi
+
+      dnl starting with version 2.2.6 wx-config has --cppflags argument
+      wx_has_cppflags=""
+      if test $wx_config_major_version -gt 2; then
+        wx_has_cppflags=yes
+      else
+        if test $wx_config_major_version -eq 2; then
+           if test $wx_config_minor_version -gt 2; then
+              wx_has_cppflags=yes
+           else
+              if test $wx_config_minor_version -eq 2; then
+                 if test $wx_config_micro_version -ge 6; then
+                    wx_has_cppflags=yes
+                 fi
+              fi
+           fi
+        fi
+      fi
+
+      dnl starting with version 2.7.0 wx-config has --rescomp option
+      wx_has_rescomp=""
+      if test $wx_config_major_version -gt 2; then
+        wx_has_rescomp=yes
+      else
+        if test $wx_config_major_version -eq 2; then
+           if test $wx_config_minor_version -ge 7; then
+              wx_has_rescomp=yes
+           fi
+        fi
+      fi
+      if test "x$wx_has_rescomp" = x ; then
+         dnl cannot give any useful info for resource compiler
+         WX_RESCOMP=
+      else
+         WX_RESCOMP=`$WX_CONFIG_WITH_ARGS --rescomp`
+      fi
+
+      if test "x$wx_has_cppflags" = x ; then
+         dnl no choice but to define all flags like CFLAGS
+         WX_CFLAGS=`$WX_CONFIG_WITH_ARGS --cflags $4`
+         WX_CPPFLAGS=$WX_CFLAGS
+         WX_CXXFLAGS=$WX_CFLAGS
+
+         WX_CFLAGS_ONLY=$WX_CFLAGS
+         WX_CXXFLAGS_ONLY=$WX_CFLAGS
+      else
+         dnl we have CPPFLAGS included in CFLAGS included in CXXFLAGS
+         WX_CPPFLAGS=`$WX_CONFIG_WITH_ARGS --cppflags $4`
+         WX_CXXFLAGS=`$WX_CONFIG_WITH_ARGS --cxxflags $4`
+         WX_CFLAGS=`$WX_CONFIG_WITH_ARGS --cflags $4`
+
+         WX_CFLAGS_ONLY=`echo $WX_CFLAGS | sed "s@^$WX_CPPFLAGS *@@"`
+         WX_CXXFLAGS_ONLY=`echo $WX_CXXFLAGS | sed "s@^$WX_CFLAGS *@@"`
+      fi
+
+      ifelse([$2], , :, [$2])
+
+    else
+
+       if test "x$WX_VERSION" = x; then
+          dnl no wx-config at all
+          AC_MSG_RESULT(no)
+       else
+          AC_MSG_RESULT(no (version $WX_VERSION is not new enough))
+       fi
+
+       WX_CFLAGS=""
+       WX_CPPFLAGS=""
+       WX_CXXFLAGS=""
+       WX_LIBS=""
+       WX_LIBS_STATIC=""
+       WX_RESCOMP=""
+
+       if test ! -z "$5"; then
+
+          wx_error_message="
+    The configuration you asked for $PACKAGE_NAME requires a wxWidgets
+    build with the following settings:
+        $5
+    but such build is not available.
+
+    To see the wxWidgets builds available on this system, please use
+    'wx-config --list' command. To use the default build, returned by
+    'wx-config --selected-config', use the options with their 'auto'
+    default values."
+
+       fi
+
+       wx_error_message="
+    The requested wxWidgets build couldn't be found.
+    $wx_error_message
+
+    If you still get this error, then check that 'wx-config' is
+    in path, the directory where wxWidgets libraries are installed
+    (returned by 'wx-config --libs' command) is in LD_LIBRARY_PATH
+    or equivalent variable and wxWidgets version is $1 or above."
+
+       ifelse([$3], , AC_MSG_ERROR([$wx_error_message]), [$3])
+
+    fi
+  else
+
+    WX_CFLAGS=""
+    WX_CPPFLAGS=""
+    WX_CXXFLAGS=""
+    WX_LIBS=""
+    WX_LIBS_STATIC=""
+    WX_RESCOMP=""
+
+    ifelse([$3], , :, [$3])
+
+  fi
+
+  AC_SUBST(WX_CPPFLAGS)
+  AC_SUBST(WX_CFLAGS)
+  AC_SUBST(WX_CXXFLAGS)
+  AC_SUBST(WX_CFLAGS_ONLY)
+  AC_SUBST(WX_CXXFLAGS_ONLY)
+  AC_SUBST(WX_LIBS)
+  AC_SUBST(WX_LIBS_STATIC)
+  AC_SUBST(WX_VERSION)
+  AC_SUBST(WX_RESCOMP)
+
+  dnl need to export also WX_VERSION_MINOR and WX_VERSION_MAJOR symbols
+  dnl to support wxpresets bakefiles (we export also WX_VERSION_MICRO for completeness):
+  WX_VERSION_MAJOR="$wx_config_major_version"
+  WX_VERSION_MINOR="$wx_config_minor_version"
+  WX_VERSION_MICRO="$wx_config_micro_version"
+  AC_SUBST(WX_VERSION_MAJOR)
+  AC_SUBST(WX_VERSION_MINOR)
+  AC_SUBST(WX_VERSION_MICRO)
+])
+
+dnl ---------------------------------------------------------------------------
+dnl Get information on the wxrc program for making C++, Python and xrs
+dnl resource files.
+dnl
+dnl     AC_ARG_ENABLE(...)
+dnl     AC_ARG_WITH(...)
+dnl        ...
+dnl     WX_CONFIG_OPTIONS
+dnl        ...
+dnl     WX_CONFIG_CHECK(2.6.0, wxWin=1)
+dnl     if test "$wxWin" != 1; then
+dnl        AC_MSG_ERROR([
+dnl                wxWidgets must be installed on your system
+dnl                but wx-config script couldn't be found.
+dnl
+dnl                Please check that wx-config is in path, the directory
+dnl                where wxWidgets libraries are installed (returned by
+dnl                'wx-config --libs' command) is in LD_LIBRARY_PATH or
+dnl                equivalent variable and wxWidgets version is 2.6.0 or above.
+dnl        ])
+dnl     fi
+dnl
+dnl     WXRC_CHECK([HAVE_WXRC=1], [HAVE_WXRC=0])
+dnl     if test "x$HAVE_WXRC" != x1; then
+dnl         AC_MSG_ERROR([
+dnl                The wxrc program was not installed or not found.
+dnl
+dnl                Please check the wxWidgets installation.
+dnl         ])
+dnl     fi
+dnl
+dnl     CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
+dnl     CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS_ONLY"
+dnl     CFLAGS="$CFLAGS $WX_CFLAGS_ONLY"
+dnl
+dnl     LDFLAGS="$LDFLAGS $WX_LIBS"
+dnl ---------------------------------------------------------------------------
+
+dnl ---------------------------------------------------------------------------
+dnl WXRC_CHECK([ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]])
+dnl
+dnl Test for wxWidgets' wxrc program for creating either C++, Python or XRS
+dnl resources.  The variable WXRC will be set and substituted in the configure
+dnl script and Makefiles.
+dnl
+dnl Example use:
+dnl   WXRC_CHECK([wxrc=1], [wxrc=0])
+dnl ---------------------------------------------------------------------------
+
+dnl
+dnl wxrc program from the wx-config script
+dnl
+AC_DEFUN([WXRC_CHECK],
+[
+  AC_ARG_VAR([WXRC], [Path to wxWidget's wxrc resource compiler])
+
+  if test "x$WX_CONFIG_NAME" = x; then
+    AC_MSG_ERROR([The wxrc tests must run after wxWidgets test.])
+  else
+
+    AC_MSG_CHECKING([for wxrc])
+
+    if test "x$WXRC" = x ; then
+      dnl wx-config --utility is a new addition to wxWidgets:
+      _WX_PRIVATE_CHECK_VERSION(2,5,3)
+      if test -n "$wx_ver_ok"; then
+        WXRC=`$WX_CONFIG_WITH_ARGS --utility=wxrc`
+      fi
+    fi
+
+    if test "x$WXRC" = x ; then
+      AC_MSG_RESULT([not found])
+      ifelse([$2], , :, [$2])
+    else
+      AC_MSG_RESULT([$WXRC])
+      ifelse([$1], , :, [$1])
+    fi
+
+    AC_SUBST(WXRC)
+  fi
+])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_LIKE_LIBNAME([output-var] [prefix], [name])
+dnl
+dnl Sets the "output-var" variable to the name of a library named with same
+dnl wxWidgets rule.
+dnl E.g. for output-var=='lib', name=='test', prefix='mine', sets
+dnl      the $lib variable to:
+dnl          'mine_gtk2ud_test-2.8'
+dnl      if WX_PORT=gtk2, WX_UNICODE=1, WX_DEBUG=1 and WX_RELEASE=28
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_LIKE_LIBNAME],
+    [
+        wx_temp="$2""_""$WX_PORT"
+
+        dnl add the [u][d] string
+        if test "$WX_UNICODE" = "1"; then
+            wx_temp="$wx_temp""u"
+        fi
+        if test "$WX_DEBUG" = "1"; then
+            wx_temp="$wx_temp""d"
+        fi
+
+        dnl complete the name of the lib
+        wx_temp="$wx_temp""_""$3""-$WX_VERSION_MAJOR.$WX_VERSION_MINOR"
+
+        dnl save it in the user's variable
+        $1=$wx_temp
+    ])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_ARG_ENABLE_YESNOAUTO/WX_ARG_WITH_YESNOAUTO
+dnl
+dnl Two little custom macros which define the ENABLE/WITH configure arguments.
+dnl Macro arguments:
+dnl $1 = the name of the --enable / --with  feature
+dnl $2 = the name of the variable associated
+dnl $3 = the description of that feature
+dnl $4 = the default value for that feature
+dnl $5 = additional action to do in case option is given with "yes" value
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_ARG_ENABLE_YESNOAUTO],
+         [AC_ARG_ENABLE($1,
+            AC_HELP_STRING([--enable-$1], [$3 (default is $4)]),
+            [], [enableval="$4"])
+
+            dnl Show a message to the user about this option
+            AC_MSG_CHECKING([for the --enable-$1 option])
+            if test "$enableval" = "yes" ; then
+                AC_MSG_RESULT([yes])
+                $2=1
+                $5
+            elif test "$enableval" = "no" ; then
+                AC_MSG_RESULT([no])
+                $2=0
+            elif test "$enableval" = "auto" ; then
+                AC_MSG_RESULT([will be automatically detected])
+                $2=""
+            else
+                AC_MSG_ERROR([
+    Unrecognized option value (allowed values: yes, no, auto)
+                ])
+            fi
+         ])
+
+AC_DEFUN([WX_ARG_WITH_YESNOAUTO],
+         [AC_ARG_WITH($1,
+            AC_HELP_STRING([--with-$1], [$3 (default is $4)]),
+            [], [withval="$4"])
+
+            dnl Show a message to the user about this option
+            AC_MSG_CHECKING([for the --with-$1 option])
+            if test "$withval" = "yes" ; then
+                AC_MSG_RESULT([yes])
+                $2=1
+                $5
+            dnl NB: by default we don't allow --with-$1=no option
+            dnl     since it does not make much sense !
+            elif test "$6" = "1" -a "$withval" = "no" ; then
+                AC_MSG_RESULT([no])
+                $2=0
+            elif test "$withval" = "auto" ; then
+                AC_MSG_RESULT([will be automatically detected])
+                $2=""
+            else
+                AC_MSG_ERROR([
+    Unrecognized option value (allowed values: yes, auto)
+                ])
+            fi
+         ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl WX_STANDARD_OPTIONS([options-to-add])
+dnl
+dnl Adds to the configure script one or more of the following options:
+dnl   --enable-[debug|unicode|shared|wxshared|wxdebug]
+dnl   --with-[gtk|msw|motif|x11|mac|dfb]
+dnl   --with-wxversion
+dnl Then checks for their presence and eventually set the DEBUG, UNICODE, SHARED,
+dnl PORT, WX_SHARED, WX_DEBUG, variables to one of the "yes", "no", "auto" values.
+dnl
+dnl Note that e.g. UNICODE != WX_UNICODE; the first is the value of the
+dnl --enable-unicode option (in boolean format) while the second indicates
+dnl if wxWidgets was built in Unicode mode (and still is in boolean format).
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_STANDARD_OPTIONS],
+        [
+
+        dnl the following lines will expand to WX_ARG_ENABLE_YESNOAUTO calls if and only if
+        dnl the $1 argument contains respectively the debug,unicode or shared options.
+
+        dnl be careful here not to set debug flag if only "wxdebug" was specified
+        ifelse(regexp([$1], [\bdebug]), [-1],,
+               [WX_ARG_ENABLE_YESNOAUTO([debug], [DEBUG], [Build in debug mode], [auto])])
+
+        ifelse(index([$1], [unicode]), [-1],,
+               [WX_ARG_ENABLE_YESNOAUTO([unicode], [UNICODE], [Build in Unicode mode], [auto])])
+
+        ifelse(regexp([$1], [\bshared]), [-1],,
+               [WX_ARG_ENABLE_YESNOAUTO([shared], [SHARED], [Build as shared library], [auto])])
+
+        dnl WX_ARG_WITH_YESNOAUTO cannot be used for --with-toolkit since it's an option
+        dnl which must be able to accept the auto|gtk1|gtk2|msw|... values
+        ifelse(index([$1], [toolkit]), [-1],,
+               [
+                AC_ARG_WITH([toolkit],
+                            AC_HELP_STRING([--with-toolkit],
+                                           [Build against a specific wxWidgets toolkit (default is auto)]),
+                            [], [withval="auto"])
+
+                dnl Show a message to the user about this option
+                AC_MSG_CHECKING([for the --with-toolkit option])
+                if test "$withval" = "auto" ; then
+                    AC_MSG_RESULT([will be automatically detected])
+                    TOOLKIT=""
+                else
+                    TOOLKIT="$withval"
+
+                    dnl PORT must be one of the allowed values
+                    if test "$TOOLKIT" != "gtk1" -a "$TOOLKIT" != "gtk2" -a "$TOOLKIT" != "gtk3" -a \
+                            "$TOOLKIT" != "msw" -a "$TOOLKIT" != "motif" -a \
+                            "$TOOLKIT" != "osx_carbon" -a "$TOOLKIT" != "osx_cocoa" -a \
+                            "$TOOLKIT" != "dfb" -a "$TOOLKIT" != "x11" -a "$TOOLKIT" != "base"; then
+                        AC_MSG_ERROR([
+    Unrecognized option value (allowed values: auto, gtk1, gtk2, gtk3, msw, motif, osx_carbon, osx_cocoa, dfb, x11, base)
+                        ])
+                    fi
+
+                    AC_MSG_RESULT([$TOOLKIT])
+                fi
+               ])
+
+        dnl ****** IMPORTANT *******
+        dnl   Unlike for the UNICODE setting, you can build your program in
+        dnl   shared mode against a static build of wxWidgets. Thus we have the
+        dnl   following option which allows these mixtures. E.g.
+        dnl
+        dnl      ./configure --disable-shared --with-wxshared
+        dnl
+        dnl   will build your library in static mode against the first available
+        dnl   shared build of wxWidgets.
+        dnl
+        dnl   Note that's not possible to do the viceversa:
+        dnl
+        dnl      ./configure --enable-shared --without-wxshared
+        dnl
+        dnl   Doing so you would try to build your library in shared mode against a static
+        dnl   build of wxWidgets. This is not possible (you would mix PIC and non PIC code) !
+        dnl   A check for this combination of options is in WX_DETECT_STANDARD_OPTION_VALUES
+        dnl   (where we know what 'auto' should be expanded to).
+        dnl
+        dnl   If you try to build something in ANSI mode against a UNICODE build
+        dnl   of wxWidgets or in RELEASE mode against a DEBUG build of wxWidgets,
+        dnl   then at best you'll get ton of linking errors !
+        dnl ************************
+
+        ifelse(index([$1], [wxshared]), [-1],,
+               [
+                WX_ARG_WITH_YESNOAUTO(
+                    [wxshared], [WX_SHARED],
+                    [Force building against a shared build of wxWidgets, even if --disable-shared is given],
+                    [auto], [], [1])
+               ])
+
+        dnl Just like for SHARED and WX_SHARED it may happen that some adventurous
+        dnl peoples will want to mix a wxWidgets release build with a debug build of
+        dnl his app/lib. So, we have both DEBUG and WX_DEBUG variables.
+        ifelse(index([$1], [wxdebug]), [-1],,
+               [
+                WX_ARG_WITH_YESNOAUTO(
+                    [wxdebug], [WX_DEBUG],
+                    [Force building against a debug build of wxWidgets, even if --disable-debug is given],
+                    [auto], [], [1])
+               ])
+
+        dnl WX_ARG_WITH_YESNOAUTO cannot be used for --with-wxversion since it's an option
+        dnl which accepts the "auto|2.6|2.7|2.8|2.9|3.0" etc etc values
+        ifelse(index([$1], [wxversion]), [-1],,
+               [
+                AC_ARG_WITH([wxversion],
+                            AC_HELP_STRING([--with-wxversion],
+                                           [Build against a specific version of wxWidgets (default is auto)]),
+                            [], [withval="auto"])
+
+                dnl Show a message to the user about this option
+                AC_MSG_CHECKING([for the --with-wxversion option])
+                if test "$withval" = "auto" ; then
+                    AC_MSG_RESULT([will be automatically detected])
+                    WX_RELEASE=""
+                else
+
+                    wx_requested_major_version=`echo $withval | \
+                        sed 's/\([[0-9]]*\).\([[0-9]]*\).*/\1/'`
+                    wx_requested_minor_version=`echo $withval | \
+                        sed 's/\([[0-9]]*\).\([[0-9]]*\).*/\2/'`
+
+                    dnl both vars above must be exactly 1 digit
+                    if test "${#wx_requested_major_version}" != "1" -o \
+                            "${#wx_requested_minor_version}" != "1" ; then
+                        AC_MSG_ERROR([
+    Unrecognized option value (allowed values: auto, 2.6, 2.7, 2.8, 2.9, 3.0)
+                        ])
+                    fi
+
+                    WX_RELEASE="$wx_requested_major_version"".""$wx_requested_minor_version"
+                    AC_MSG_RESULT([$WX_RELEASE])
+                fi
+               ])
+
+        if test "$WX_DEBUG_CONFIGURE" = "1"; then
+            echo "[[dbg]] DEBUG: $DEBUG, WX_DEBUG: $WX_DEBUG"
+            echo "[[dbg]] UNICODE: $UNICODE, WX_UNICODE: $WX_UNICODE"
+            echo "[[dbg]] SHARED: $SHARED, WX_SHARED: $WX_SHARED"
+            echo "[[dbg]] TOOLKIT: $TOOLKIT, WX_TOOLKIT: $WX_TOOLKIT"
+            echo "[[dbg]] VERSION: $VERSION, WX_RELEASE: $WX_RELEASE"
+        fi
+    ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl WX_CONVERT_STANDARD_OPTIONS_TO_WXCONFIG_FLAGS
+dnl
+dnl Sets the WXCONFIG_FLAGS string using the SHARED,DEBUG,UNICODE variable values
+dnl which were specified.
+dnl Thus this macro needs to be called only once all options have been set.
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_CONVERT_STANDARD_OPTIONS_TO_WXCONFIG_FLAGS],
+        [
+        if test "$WX_SHARED" = "1" ; then
+            WXCONFIG_FLAGS="--static=no "
+        elif test "$WX_SHARED" = "0" ; then
+            WXCONFIG_FLAGS="--static=yes "
+        fi
+
+        if test "$WX_DEBUG" = "1" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--debug=yes "
+        elif test "$WX_DEBUG" = "0" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--debug=no "
+        fi
+
+        dnl The user should have set WX_UNICODE=UNICODE
+        if test "$WX_UNICODE" = "1" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--unicode=yes "
+        elif test "$WX_UNICODE" = "0" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--unicode=no "
+        fi
+
+        if test -n "$TOOLKIT" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--toolkit=$TOOLKIT "
+        fi
+
+        if test -n "$WX_RELEASE" ; then
+            WXCONFIG_FLAGS="$WXCONFIG_FLAGS""--version=$WX_RELEASE "
+        fi
+
+        dnl strip out the last space of the string
+        WXCONFIG_FLAGS=${WXCONFIG_FLAGS% }
+
+        if test "$WX_DEBUG_CONFIGURE" = "1"; then
+            echo "[[dbg]] WXCONFIG_FLAGS: $WXCONFIG_FLAGS"
+        fi
+    ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl _WX_SELECTEDCONFIG_CHECKFOR([RESULTVAR], [STRING], [MSG])
+dnl
+dnl Sets WX_$RESULTVAR to the value of $RESULTVAR if it's defined. Otherwise,
+dnl auto-detect the value by checking for the presence of STRING in
+dnl $WX_SELECTEDCONFIG (which is supposed to be set by caller) and set
+dnl WX_$RESULTVAR to either 0 or 1, also outputting "yes" or "no" after MSG.
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([_WX_SELECTEDCONFIG_CHECKFOR],
+        [
+        if test -z "$$1" ; then
+
+            dnl The user does not have particular preferences for this option;
+            dnl so we will detect the wxWidgets relative build setting and use it
+            AC_MSG_CHECKING([$3])
+
+            dnl set WX_$1 variable to 1 if the $WX_SELECTEDCONFIG contains the $2
+            dnl string or to 0 otherwise.
+            dnl NOTE: 'expr match STRING REGEXP' cannot be used since on Mac it
+            dnl       doesn't work; we use 'expr STRING : REGEXP' instead
+            WX_$1=$(expr "$WX_SELECTEDCONFIG" : ".*$2.*")
+
+            if test "$WX_$1" != "0"; then
+                WX_$1=1
+                AC_MSG_RESULT([yes])
+            else
+                WX_$1=0
+                AC_MSG_RESULT([no])
+            fi
+        else
+
+            dnl Use the setting given by the user
+            WX_$1=$$1
+        fi
+    ])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_DETECT_STANDARD_OPTION_VALUES
+dnl
+dnl Detects the values of the following variables:
+dnl 1) WX_RELEASE
+dnl 2) WX_UNICODE
+dnl 3) WX_DEBUG
+dnl 4) WX_SHARED    (and also WX_STATIC)
+dnl 5) WX_PORT
+dnl from the previously selected wxWidgets build; this macro in fact must be
+dnl called *after* calling the WX_CONFIG_CHECK macro.
+dnl
+dnl Note that the WX_VERSION_MAJOR, WX_VERSION_MINOR symbols are already set
+dnl by WX_CONFIG_CHECK macro
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_DETECT_STANDARD_OPTION_VALUES],
+        [
+        dnl IMPORTANT: WX_VERSION contains all three major.minor.micro digits,
+        dnl            while WX_RELEASE only the major.minor ones.
+        WX_RELEASE="$WX_VERSION_MAJOR""$WX_VERSION_MINOR"
+        if test $WX_RELEASE -lt 26 ; then
+
+            AC_MSG_ERROR([
+    Cannot detect the wxWidgets configuration for the selected wxWidgets build
+    since its version is $WX_VERSION < 2.6.0; please install a newer
+    version of wxWidgets.
+                         ])
+        fi
+
+        dnl The wx-config we are using understands the "--selected_config"
+        dnl option which returns an easy-parseable string !
+        WX_SELECTEDCONFIG=$($WX_CONFIG_WITH_ARGS --selected_config)
+
+        if test "$WX_DEBUG_CONFIGURE" = "1"; then
+            echo "[[dbg]] Using wx-config --selected-config"
+            echo "[[dbg]] WX_SELECTEDCONFIG: $WX_SELECTEDCONFIG"
+        fi
+
+        dnl we could test directly for WX_SHARED with a line like:
+        dnl    _WX_SELECTEDCONFIG_CHECKFOR([SHARED], [shared],
+        dnl                                [if wxWidgets was built in SHARED mode])
+        dnl but wx-config --selected-config DOES NOT outputs the 'shared'
+        dnl word when wx was built in shared mode; it rather outputs the
+        dnl 'static' word when built in static mode.
+        if test "$WX_SHARED" = "1"; then
+            STATIC=0
+        elif test "$WX_SHARED" = "0"; then
+            STATIC=1
+        fi
+
+        dnl Now set the WX_UNICODE, WX_DEBUG, WX_STATIC variables
+        _WX_SELECTEDCONFIG_CHECKFOR([UNICODE], [unicode],
+                                    [if wxWidgets was built with UNICODE enabled])
+        _WX_SELECTEDCONFIG_CHECKFOR([DEBUG], [debug],
+                                    [if wxWidgets was built in DEBUG mode])
+        _WX_SELECTEDCONFIG_CHECKFOR([STATIC], [static],
+                                    [if wxWidgets was built in STATIC mode])
+
+        dnl init WX_SHARED from WX_STATIC
+        if test "$WX_STATIC" != "0"; then
+            WX_SHARED=0
+        else
+            WX_SHARED=1
+        fi
+
+        AC_SUBST(WX_UNICODE)
+        AC_SUBST(WX_DEBUG)
+        AC_SUBST(WX_SHARED)
+
+        dnl detect the WX_PORT to use
+        if test -z "$TOOLKIT" ; then
+
+            dnl The user does not have particular preferences for this option;
+            dnl so we will detect the wxWidgets relative build setting and use it
+            AC_MSG_CHECKING([which wxWidgets toolkit was selected])
+
+            WX_GTKPORT1=$(expr "$WX_SELECTEDCONFIG" : ".*gtk1.*")
+            WX_GTKPORT2=$(expr "$WX_SELECTEDCONFIG" : ".*gtk2.*")
+            WX_GTKPORT3=$(expr "$WX_SELECTEDCONFIG" : ".*gtk3.*")
+            WX_MSWPORT=$(expr "$WX_SELECTEDCONFIG" : ".*msw.*")
+            WX_MOTIFPORT=$(expr "$WX_SELECTEDCONFIG" : ".*motif.*")
+            WX_OSXCOCOAPORT=$(expr "$WX_SELECTEDCONFIG" : ".*osx_cocoa.*")
+            WX_OSXCARBONPORT=$(expr "$WX_SELECTEDCONFIG" : ".*osx_carbon.*")
+            WX_X11PORT=$(expr "$WX_SELECTEDCONFIG" : ".*x11.*")
+            WX_DFBPORT=$(expr "$WX_SELECTEDCONFIG" : ".*dfb.*")
+            WX_BASEPORT=$(expr "$WX_SELECTEDCONFIG" : ".*base.*")
+
+            WX_PORT="unknown"
+            if test "$WX_GTKPORT1" != "0"; then WX_PORT="gtk1"; fi
+            if test "$WX_GTKPORT2" != "0"; then WX_PORT="gtk2"; fi
+            if test "$WX_GTKPORT3" != "0"; then WX_PORT="gtk3"; fi
+            if test "$WX_MSWPORT" != "0"; then WX_PORT="msw"; fi
+            if test "$WX_MOTIFPORT" != "0"; then WX_PORT="motif"; fi
+            if test "$WX_OSXCOCOAPORT" != "0"; then WX_PORT="osx_cocoa"; fi
+            if test "$WX_OSXCARBONPORT" != "0"; then WX_PORT="osx_carbon"; fi
+            if test "$WX_X11PORT" != "0"; then WX_PORT="x11"; fi
+            if test "$WX_DFBPORT" != "0"; then WX_PORT="dfb"; fi
+            if test "$WX_BASEPORT" != "0"; then WX_PORT="base"; fi
+
+            dnl NOTE: backward-compatible check for wx2.8; in wx2.9 the mac
+            dnl       ports are called 'osx_cocoa' and 'osx_carbon' (see above)
+            WX_MACPORT=$(expr "$WX_SELECTEDCONFIG" : ".*mac.*")
+            if test "$WX_MACPORT" != "0"; then WX_PORT="mac"; fi
+
+            dnl check at least one of the WX_*PORT has been set !
+
+            if test "$WX_PORT" = "unknown" ; then
+                AC_MSG_ERROR([
+        Cannot detect the currently installed wxWidgets port !
+        Please check your 'wx-config --cxxflags'...
+                            ])
+            fi
+
+            AC_MSG_RESULT([$WX_PORT])
+        else
+            dnl Use the setting given by the user
+            WX_PORT=$TOOLKIT
+        fi
+
+        AC_SUBST(WX_PORT)
+
+        if test "$WX_DEBUG_CONFIGURE" = "1"; then
+            echo "[[dbg]] Values of all WX_* options after final detection:"
+            echo "[[dbg]] WX_DEBUG: $WX_DEBUG"
+            echo "[[dbg]] WX_UNICODE: $WX_UNICODE"
+            echo "[[dbg]] WX_SHARED: $WX_SHARED"
+            echo "[[dbg]] WX_RELEASE: $WX_RELEASE"
+            echo "[[dbg]] WX_PORT: $WX_PORT"
+        fi
+
+        dnl Avoid problem described in the WX_STANDARD_OPTIONS which happens when
+        dnl the user gives the options:
+        dnl      ./configure --enable-shared --without-wxshared
+        dnl or just do
+        dnl      ./configure --enable-shared
+        dnl but there is only a static build of wxWidgets available.
+        if test "$WX_SHARED" = "0" -a "$SHARED" = "1"; then
+            AC_MSG_ERROR([
+    Cannot build shared library against a static build of wxWidgets !
+    This error happens because the wxWidgets build which was selected
+    has been detected as static while you asked to build $PACKAGE_NAME
+    as shared library and this is not possible.
+    Use the '--disable-shared' option to build $PACKAGE_NAME
+    as static library or '--with-wxshared' to use wxWidgets as shared library.
+                         ])
+        fi
+
+        dnl now we can finally update the options to their final values if they
+        dnl were not already set
+        if test -z "$UNICODE" ; then
+            UNICODE=$WX_UNICODE
+        fi
+        if test -z "$SHARED" ; then
+            SHARED=$WX_SHARED
+        fi
+        if test -z "$TOOLKIT" ; then
+            TOOLKIT=$WX_PORT
+        fi
+
+        dnl respect the DEBUG variable adding the optimize/debug flags and also
+        dnl define a BUILD variable in case the user wants to use it
+        dnl
+        dnl NOTE: the CXXFLAGS are merged together with the CPPFLAGS so we
+        dnl       don't need to set them, too
+        dnl DH: I've fixed this section to prepend flags to avoid clobbering user-supplied values;
+        dnl DH: Added a -g to release builds
+        dnl DH: Applied release flags even when $DEBUG is undefined as (to prevent duplication) I prevent automake from using its ones
+        if test "$DEBUG" = "1"; then
+            BUILD="debug"
+            CXXFLAGS="-g -O0 $CXXFLAGS"
+            CFLAGS="-g -O0 $CFLAGS"
+        elif test "$DEBUG" = "0" || test -z "$DEBUG"; then
+            BUILD="release"
+            CXXFLAGS="-g -O2 $CXXFLAGS"
+            CFLAGS="-g -O2 $CFLAGS"
+        fi
+    ])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_BOOLOPT_SUMMARY([name of the boolean variable to show summary for],
+dnl                   [what to print when var is 1],
+dnl                   [what to print when var is 0])
+dnl
+dnl Prints $2 when variable $1 == 1 and prints $3 when variable $1 == 0.
+dnl This macro mainly exists just to make configure.ac scripts more readable.
+dnl
+dnl NOTE: you need to use the [" my message"] syntax for 2nd and 3rd arguments
+dnl       if you want that m4 avoid to throw away the spaces prefixed to the
+dnl       argument value.
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_BOOLOPT_SUMMARY],
+        [
+        if test "x$$1" = "x1" ; then
+            echo $2
+        elif test "x$$1" = "x0" ; then
+            echo $3
+        else
+            echo "$1 is $$1"
+        fi
+    ])
+
+dnl ---------------------------------------------------------------------------
+dnl WX_STANDARD_OPTIONS_SUMMARY_MSG
+dnl
+dnl Shows a summary message to the user about the WX_* variable contents.
+dnl This macro is used typically at the end of the configure script.
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_STANDARD_OPTIONS_SUMMARY_MSG],
+        [
+        echo
+        echo "  The wxWidgets build which will be used by $PACKAGE_NAME $PACKAGE_VERSION"
+        echo "  has the following settings:"
+        WX_BOOLOPT_SUMMARY([WX_DEBUG],   ["  - DEBUG build"],  ["  - RELEASE build"])
+        WX_BOOLOPT_SUMMARY([WX_UNICODE], ["  - UNICODE mode"], ["  - ANSI mode"])
+        WX_BOOLOPT_SUMMARY([WX_SHARED],  ["  - SHARED mode"],  ["  - STATIC mode"])
+        echo "  - VERSION: $WX_VERSION"
+        echo "  - PORT: $WX_PORT"
+    ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl WX_STANDARD_OPTIONS_SUMMARY_MSG_BEGIN, WX_STANDARD_OPTIONS_SUMMARY_MSG_END
+dnl
+dnl Like WX_STANDARD_OPTIONS_SUMMARY_MSG macro but these two macros also gives info
+dnl about the configuration of the package which used the wxpresets.
+dnl
+dnl Typical usage:
+dnl    WX_STANDARD_OPTIONS_SUMMARY_MSG_BEGIN
+dnl    echo "   - Package setting 1: $SETTING1"
+dnl    echo "   - Package setting 2: $SETTING1"
+dnl    ...
+dnl    WX_STANDARD_OPTIONS_SUMMARY_MSG_END
+dnl
+dnl ---------------------------------------------------------------------------
+AC_DEFUN([WX_STANDARD_OPTIONS_SUMMARY_MSG_BEGIN],
+        [
+        echo
+        echo " ----------------------------------------------------------------"
+        echo "  Configuration for $PACKAGE_NAME $PACKAGE_VERSION successfully completed."
+        echo "  Summary of main configuration settings for $PACKAGE_NAME:"
+        WX_BOOLOPT_SUMMARY([DEBUG], ["  - DEBUG build"], ["  - RELEASE build"])
+        WX_BOOLOPT_SUMMARY([UNICODE], ["  - UNICODE mode"], ["  - ANSI mode"])
+        WX_BOOLOPT_SUMMARY([SHARED], ["  - SHARED mode"], ["  - STATIC mode"])
+    ])
+
+AC_DEFUN([WX_STANDARD_OPTIONS_SUMMARY_MSG_END],
+        [
+        WX_STANDARD_OPTIONS_SUMMARY_MSG
+        echo
+        echo "  Now, just run make."
+        echo " ----------------------------------------------------------------"
+        echo
+    ])
+
+
+dnl ---------------------------------------------------------------------------
+dnl Deprecated macro wrappers
+dnl ---------------------------------------------------------------------------
+
+AC_DEFUN([AM_OPTIONS_WXCONFIG], [WX_CONFIG_OPTIONS])
+AC_DEFUN([AM_PATH_WXCONFIG], [
+    WX_CONFIG_CHECK([$1],[$2],[$3],[$4],[$5])
+])
+AC_DEFUN([AM_PATH_WXRC], [WXRC_CHECK([$1],[$2])])
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
index 0000000..613ee2a
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,151 @@
+
+## Check the user actually wants to install the binary
+if AMINSTALL_install_app
+  bin_PROGRAMS = 4Pane
+endif
+
+## automake seems to derive $(pkgdatadir) from AC_INIT, which lowercases it!
+pkgdatadir = $(datadir)/4Pane
+
+ACLOCAL_AMFLAGS = -I .build --install
+
+
+## Variables: ##
+
+CC = @CC@
+CXX = @CXX@
+
+WX_CFLAGS = @WX_CFLAGS@
+WX_CXXFLAGS = @WX_CXXFLAGS@
+WX_LIBS = @WX_LIBS@
+
+GTKPKG_CFLAGS = @GTKPKG_CFLAGS@
+GTKPKG_LDFLAGS = @GTKPKG_LDFLAGS@
+XZFLAGS = @XZFLAGS@
+BZIP2_FLAGS = @BZIP2_FLAGS@
+EXTRA_CPPFLAGS = @EXTRA_CPPFLAGS@
+EXTRA_CFLAGS = @EXTRA_CFLAGS@
+EXTRA_CXXFLAGS = @EXTRA_CXXFLAGS@
+EXTRA_LDFLAGS = @EXTRA_LDFLAGS@
+
+
+## The following prevents outputting, in every compile element, several inches of unnecessary '-DPACKAGE_FOO=bar' type definitions
+DEFS = 
+
+## I'm intentionally omitting $CPPFLAGS here: they're a dup of WX_C(XX)FLAGS, which would fill every compile line with cruft
+## I'm similarly omitting $CFLAGS & $CXXFLAGS to prevent duplication as they're auto-added later
+4Pane_CFLAGS = $(WX_CFLAGS) $(EXTRA_CPPFLAGS) $(PREVENT_ASSERTS) $(XZFLAGS) $(BZIP2_FLAGS) $(EXTRA_CFLAGS)
+4Pane_CXXFLAGS = $(WX_CXXFLAGS)  $(EXTRA_CPPFLAGS) $(GTKPKG_CFLAGS) $(PREVENT_ASSERTS) $(XZFLAGS) $(BZIP2_FLAGS) $(EXTRA_CXXFLAGS)
+
+## LIBS is an autoconf builtin (like CXXFLAGS etc). It seems 2b the best place for lib stuff as it gets appended to the link line
+LIBS = $(WX_LIBS)  $(GTKPKG_LDFLAGS) $(AM_LDFLAGS) $(LDFLAGS) $(XTRLIBS)
+## We can't let 4Pane_LINK work as usual: it appends the objects, which means link fails. So override it
+4Pane_LINK=$(CXX) -o 4Pane 
+
+## Sources: ##
+
+4Pane_SOURCES = \
+  Accelerators.cpp \
+  Archive.cpp \
+  ArchiveStream.cpp \
+  Bookmarks.cpp \
+  Configure.cpp \
+  Devices.cpp \
+  Dup.cpp \
+  ExecuteInDialog.cpp \
+  Filetypes.cpp \
+  Misc.cpp \
+  Mounts.cpp \
+  MyDirs.cpp \
+  MyDragImage.cpp \
+  MyFiles.cpp \
+  MyFrame.cpp \
+  MyGenericDirCtrl.cpp \
+  MyNotebook.cpp \
+  MyTreeCtrl.cpp \
+  Otherstreams.cpp \
+  Redo.cpp \
+  Tools.cpp \
+  bzipstream.cpp \
+  sdk/fswatcher/MyFSWatcher.cpp
+
+if AMBUILTIN_BZIP
+4Pane_SOURCES += \
+  sdk/bzip/blocksort.c \
+  sdk/bzip/bzlib.c \
+  sdk/bzip/compress.c \
+  sdk/bzip/crctable.c \
+  sdk/bzip/decompress.c \
+  sdk/bzip/huffman.c \
+  sdk/bzip/randtable.c
+endif
+
+
+if AMINSTALL_install_rc
+  rcdir = $(pkgdatadir)/rc
+  rc_DATA = rc/dialogs.xrc rc/moredialogs.xrc rc/configuredialogs.xrc rc/4Pane.desktop
+
+  bitmapdir = $(pkgdatadir)/bitmaps
+  bitmap_DATA = bitmaps/4PaneIcon48.png bitmaps/4Pane.png bitmaps/chrome-chromium.png bitmaps/DelTab.png bitmaps/DnDSelectedCursor.png bitmaps/DnDStdCursor.png bitmaps/dragicon.png bitmaps/firefox.png bitmaps/gjots.png bitmaps/hardlink.png bitmaps/help.png bitmaps/iceweasel.png bitmaps/largedropdown.png bitmaps/libreoffice.png bitmaps/mate-text-editor.png bitmaps/mousepad.png bitmaps/mozillacrystal.png bitmaps/NewTab.png bitmaps/openoffice.png bitmaps/palemoon.png bitmaps/photocopier_0.png bitmaps/photocopier_10.png bitmaps/photocopier_11.png bitmaps/photocopier_12.png bitmaps/photocopier_13.png bitmaps/photocopier_14.png bitmaps/photocopier_15.png bitmaps/photocopier_16.png bitmaps/photocopier_17.png bitmaps/photocopier_18.png bitmaps/photocopier_19.png bitmaps/photocopier_1.png bitmaps/photocopier_20.png bitmaps/photocopier_21.png bitmaps/photocopier_22.png bitmaps/photocopier_23.png bitmaps/photocopier_24.png bitmaps/photocopier_25.png bitmaps/photocopier_26.png bitmaps/photocopier_27.png bitmaps/photocopier_28.png bitmaps/photocopier_29.png bitmaps/photocopier_2.png bitmaps/photocopier_30.png bitmaps/photocopier_31.png bitmaps/photocopier_32.png bitmaps/photocopier_33.png bitmaps/photocopier_34.png bitmaps/photocopier_35.png bitmaps/photocopier_36.png bitmaps/photocopier_37.png bitmaps/photocopier_38.png bitmaps/photocopier_39.png bitmaps/photocopier_3.png bitmaps/photocopier_40.png bitmaps/photocopier_41.png bitmaps/photocopier_42.png bitmaps/photocopier_43.png bitmaps/photocopier_4.png bitmaps/photocopier_5.png bitmaps/photocopier_6.png bitmaps/photocopier_7.png bitmaps/photocopier_8.png bitmaps/photocopier_9.png bitmaps/Preview.png bitmaps/seamonkey.png bitmaps/smalldropdown.png bitmaps/softlink.png bitmaps/4PaneIcon16.xpm bitmaps/4PaneIcon32.xpm bitmaps/4PaneIcon40x32.xpm bitmaps/4PaneIcon48.xpm bitmaps/back.xpm bitmaps/bm1_button.xpm bitmaps/bm2_button.xpm bitmaps/bm3_button.xpm bitmaps/cdrom.xpm bitmaps/cdr.xpm bitmaps/clear_right.xpm bitmaps/connect_no.xpm bitmaps/dir_up.xpm bitmaps/down.xpm bitmaps/editor.xpm bitmaps/evince.xpm bitmaps/fileopen.xpm bitmaps/floppy.xpm bitmaps/forward.xpm bitmaps/gedit.xpm bitmaps/gohome.xpm bitmaps/harddisk-usb.xpm bitmaps/harddisk.xpm bitmaps/kedit.xpm bitmaps/kwrite.xpm bitmaps/largedropdown.xpm bitmaps/MyDocuments.xpm bitmaps/new_dir.xpm bitmaps/smalldropdown.xpm bitmaps/toparent.xpm bitmaps/unknown.xpm bitmaps/UsbMem.xpm bitmaps/UsbMulticard.xpm bitmaps/UsbPen.xpm
+
+  appsvgicondir=$(datadir)/icons/hicolor/scalable/apps
+  appsvgicon_DATA=bitmaps/4Pane.svg
+  appicondir=$(datadir)/icons/hicolor/48x48/apps
+  appicon_DATA=bitmaps/4Pane.png
+endif
+
+
+if AMINSTALL_install_docs
+  docsdir = $(datadir)/doc/4Pane
+  docs_DATA = doc/About.htm doc/Archive.htm doc/ArchiveBrowse.htm doc/Bookmarks.htm doc/Chapt.con doc/Chapt.hhc doc/Chapt.hhk doc/Chapt.hhp doc/Configure.htm doc/ConfigureUserDefTools.htm doc/ConfiguringDevices.htm doc/ConfiguringDisplay.htm doc/ConfiguringMisc.htm doc/ConfiguringNetworks.htm doc/ConfiguringShortcuts.htm doc/ConfiguringTerminals.htm doc/Contents.htm doc/ContextMenu.htm doc/Copier.png doc/Devices.htm doc/Display.htm doc/DnD.htm doc/DnDSelectedCursor.png doc/DnDStdCursor.png doc/Edit.htm doc/Editors.htm doc/Export.htm doc/FAQ.htm doc/Features.htm doc/FileviewCols.htm doc/Filter.htm doc/Hardlink.png doc/Introduction.htm doc/KeyboardNavigation.htm doc/Licence.htm doc/Menu.htm doc/Mount.htm doc/Move.png doc/MultipleRenDup.htm doc/Open.htm doc/OpenWith.htm doc/Options.htm doc/Previews.htm doc/Properties.htm doc/Quickstart.htm doc/RAQ.htm doc/RegExpHelp.htm doc/Running.htm doc/Softlink.png doc/Statusbar.htm doc/Tabs.htm doc/TerminalEm.htm doc/Toolbar.htm doc/Tools.htm doc/UnRedo.htm doc/Using4Pane.htm doc/View.htm doc/back.gif doc/forward.gif doc/up.gif
+endif
+
+if AMINSTALL_locale
+  locldir = $(datadir)
+  nobase_locl_DATA = locale/ar/LC_MESSAGES/4Pane.mo locale/ca/LC_MESSAGES/4Pane.mo locale/da/LC_MESSAGES/4Pane.mo locale/de/LC_MESSAGES/4Pane.mo locale/es/LC_MESSAGES/4Pane.mo locale/et/LC_MESSAGES/4Pane.mo locale/fa/LC_MESSAGES/4Pane.mo locale/fr/LC_MESSAGES/4Pane.mo locale/it/LC_MESSAGES/4Pane.mo locale/ja/LC_MESSAGES/4Pane.mo locale/pl/LC_MESSAGES/4Pane.mo locale/pt_BR/LC_MESSAGES/4Pane.mo locale/vi/LC_MESSAGES/4Pane.mo 
+endif
+
+## Hooks: ##
+
+install-exec-hook:
+  ## Create a pP symlink if requested, but only if the app itself is being installed
+if AMINSTALL_install_app
+if AMINSTALL_symlink
+	  ln -fs 4Pane $(DESTDIR)$(bindir)/4pane;
+endif
+endif
+##-----------------------------------------------------------
+
+install-data-hook:
+  ## Install the desktop file if requested, but only if the datadir exists
+if AMINSTALL_install_rc
+if AMINSTALL_desktop
+	  cp -up $(DESTDIR)$(pkgdatadir)/rc/4Pane.desktop ~/Desktop/4Pane.desktop;
+	  chmod 0755 ~/Desktop/4Pane.desktop;
+endif
+endif
+##-----------------------------------------------------------
+
+uninstall-hook:
+  ## Remove the pP symlink if requested, but only if the app itself is being uninstalled
+if AMUNINSTALL_install_app
+if AMUNINSTALL_symlink
+	  rm -rf $(DESTDIR)$(bindir)/4pane;
+endif
+endif
+
+  ## /usr/share/4Pane/ is autocreated by install, but isn't autodeleted by uninstall. So do it here
+if AMUNINSTALL_install_rc
+	  rm -rf $(DESTDIR)$(pkgdatadir);
+endif
+  ## Similarly /usr/share/doc/4Pane/
+if AMUNINSTALL_install_docs
+	  rm -rf $(DESTDIR)$(datadir)/doc/4Pane/;
+endif
+
+  ## Remove any unwanted desktop file
+if AMUNINSTALL_desktop
+	  rm -f ~/Desktop/4Pane.desktop;
+endif
+##-----------------------------------------------------------
+
diff --git a/configure.ac b/configure.ac
new file mode 120000
index 0000000..d38c112
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1 @@
+.build/configure.ac
\ No newline at end of file
